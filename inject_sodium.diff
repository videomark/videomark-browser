diff --git a/chrome/browser/browser_resources.grd b/chrome/browser/browser_resources.grd
index 994e15e..d3e5d22 100644
--- a/chrome/browser/browser_resources.grd
+++ b/chrome/browser/browser_resources.grd
@@ -69,6 +69,8 @@
       </if>
     </structures>
     <includes>
+      <include name="IDR_SODIUM_JS" file="resources\sodium.js" type="BINDATA" skip_minify="true" />
+      <include name="IDR_INJECT_SODIUM_JS" file="resources\inject_sodium.js" type="BINDATA" skip_minify="true" />
       <if expr="is_win or is_macosx or desktop_linux or chromeos">
         <include name="IDR_ABOUT_DISCARDS_CSS" file="resources\discards\discards.css" type="BINDATA" />
         <include name="IDR_ABOUT_DISCARDS_HTML" file="resources\discards\discards.html" flattenhtml="true" allowexternalscript="true" type="BINDATA" />
diff --git a/chrome/browser/resources/inject_sodium.js b/chrome/browser/resources/inject_sodium.js
new file mode 100644
index 0000000..c27f6fd
--- /dev/null
+++ b/chrome/browser/resources/inject_sodium.js
@@ -0,0 +1,5 @@
+let target = document.getElementsByTagName("body")[0];
+let script = document.createElement("script");
+script.setAttribute("type", "text/javascript");
+script.innerText = "$1";
+target.appendChild(script);
diff --git a/chrome/renderer/chrome_content_renderer_client.cc b/chrome/renderer/chrome_content_renderer_client.cc
index d3f9d5e..76096e0 100644
--- a/chrome/renderer/chrome_content_renderer_client.cc
+++ b/chrome/renderer/chrome_content_renderer_client.cc
@@ -38,6 +38,7 @@
 #include "chrome/common/secure_origin_whitelist.h"
 #include "chrome/common/thread_profiler.h"
 #include "chrome/common/url_constants.h"
+#include "chrome/grit/browser_resources.h"
 #include "chrome/grit/chromium_strings.h"
 #include "chrome/grit/generated_resources.h"
 #include "chrome/grit/renderer_resources.h"
@@ -132,12 +133,14 @@
 #include "third_party/blink/public/web/web_local_frame.h"
 #include "third_party/blink/public/web/web_plugin_container.h"
 #include "third_party/blink/public/web/web_plugin_params.h"
+#include "third_party/blink/public/web/web_script_source.h"
 #include "third_party/blink/public/web/web_security_policy.h"
 #include "ui/base/l10n/l10n_util.h"
 #include "ui/base/layout.h"
 #include "ui/base/resource/resource_bundle.h"
 #include "ui/base/webui/jstemplate_builder.h"
 #include "url/origin.h"
+#include "url/sodium_whitelist.h"
 
 #if defined(OS_ANDROID)
 #include "chrome/renderer/sandbox_status_extension_android.h"
@@ -1562,6 +1565,27 @@ void ChromeContentRendererClient::AddImageContextMenuProperties(
   }
 }
 
+void InjectSodium(content::RenderFrame* render_frame) {
+  WebLocalFrame* frame = render_frame->GetWebFrame();
+  if (!frame) return;
+
+  GURL url = GURL(frame->GetDocument().Url());
+  LOG(INFO) << "frame.url: " << url.spec();
+  LOG(INFO) << "render_frame.main_frame: " << render_frame->IsMainFrame();
+  LOG(INFO) << "render_frame.enable_sodium: " << render_frame->IsEnableSodium();
+
+  if (render_frame->IsMainFrame() && render_frame->IsEnableSodium() && url::SodiumWhitelist::IsAllowSodiumJs(url)) {
+    base::StringPiece source_piece = ui::ResourceBundle::GetSharedInstance().GetRawDataResource(IDR_SODIUM_JS);
+    //render_frame->ExecuteJavaScript(base::ASCIIToUTF16(source_piece));
+
+    base::StringPiece injector = ui::ResourceBundle::GetSharedInstance().GetRawDataResource(IDR_INJECT_SODIUM_JS);
+    std::string source = base::ReplaceStringPlaceholders(injector, std::vector<std::string>{source_piece.as_string()}, nullptr);
+    blink::WebScriptSource source_in = blink::WebScriptSource(WebString::FromUTF8(source.data(), source.size()));
+    LOG(INFO) << "source_in.code: " << source_in.code.Utf8();
+    frame->ExecuteScript(source_in);
+  }
+}
+
 void ChromeContentRendererClient::RunScriptsAtDocumentStart(
     content::RenderFrame* render_frame) {
 #if BUILDFLAG(ENABLE_EXTENSIONS)
@@ -1578,6 +1602,8 @@ void ChromeContentRendererClient::RunScriptsAtDocumentEnd(
       render_frame);
   // |render_frame| might be dead by now.
 #endif
+
+  InjectSodium(render_frame);
 }
 
 void ChromeContentRendererClient::RunScriptsAtDocumentIdle(
