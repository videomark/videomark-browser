diff --git a/content/browser/BUILD.gn b/content/browser/BUILD.gn
index f10e1a8..f8862e8 100644
--- a/content/browser/BUILD.gn
+++ b/content/browser/BUILD.gn
@@ -2367,6 +2367,8 @@ jumbo_source_set("browser") {
       "frame_host/render_frame_host_android.h",
       "media/capture/screen_capture_device_android.cc",
       "media/capture/screen_capture_device_android.h",
+      "network_information_impl.cc",
+      "network_information_impl.h",
       "renderer_host/compositor_dependencies_android.cc",
       "renderer_host/compositor_dependencies_android.h",
       "renderer_host/compositor_impl_android.cc",
diff --git a/content/browser/network_information_impl.cc b/content/browser/network_information_impl.cc
new file mode 100644
index 0000000..dae57c3
--- /dev/null
+++ b/content/browser/network_information_impl.cc
@@ -0,0 +1,29 @@
+#include "content/browser/network_information_impl.h"
+#include "net/android/network_library.h"
+
+#include "mojo/public/cpp/bindings/strong_binding.h"
+
+namespace content {
+
+NetworkInformationImpl::NetworkInformationImpl() = default;
+
+NetworkInformationImpl::~NetworkInformationImpl() = default;
+
+// static
+void NetworkInformationImpl::Create(blink::mojom::NetworkInformationRequest request) {
+  mojo::MakeStrongBinding(std::make_unique<NetworkInformationImpl>(), std::move(request));
+}
+
+void NetworkInformationImpl::GetExtraInfo(GetExtraInfoCallback callback) {
+  std::move(callback).Run(net::android::GetExtraInfo());
+}
+
+void NetworkInformationImpl::GetNetworkOperatorName(GetNetworkOperatorNameCallback callback) {
+  std::move(callback).Run(net::android::GetTelephonyNetworkOperatorName());
+}
+
+void NetworkInformationImpl::GetSimOperatorName(GetSimOperatorNameCallback callback) {
+  std::move(callback).Run(net::android::GetTelephonySimOperatorName());
+}
+
+}  // namespace content
diff --git a/content/browser/network_information_impl.h b/content/browser/network_information_impl.h
new file mode 100644
index 0000000..3c8309b
--- /dev/null
+++ b/content/browser/network_information_impl.h
@@ -0,0 +1,25 @@
+#ifndef CONTENT_BROWSER_NETWORK_INFORMATION_IMPL_H_
+#define CONTENT_BROWSER_NETWORK_INFORMATION_IMPL_H_
+
+#include "third_party/blink/public/mojom/netinfo/network_information.mojom.h"
+
+namespace content {
+
+class NetworkInformationImpl : public blink::mojom::NetworkInformation {
+ public:
+  NetworkInformationImpl();
+  ~NetworkInformationImpl() override;
+
+  static void Create(blink::mojom::NetworkInformationRequest request);
+
+ private:
+  void GetExtraInfo(GetExtraInfoCallback callback) override;
+  void GetNetworkOperatorName(GetNetworkOperatorNameCallback callback) override;
+  void GetSimOperatorName(GetSimOperatorNameCallback callback) override;
+
+  DISALLOW_COPY_AND_ASSIGN(NetworkInformationImpl);
+};
+
+}  // namespace content
+
+#endif  // CONTENT_BROWSER_NETWORK_INFORMATION_IMPL_H_
diff --git a/content/browser/renderer_host/render_process_host_impl.cc b/content/browser/renderer_host/render_process_host_impl.cc
index 8379cdf..3e111c4 100644
--- a/content/browser/renderer_host/render_process_host_impl.cc
+++ b/content/browser/renderer_host/render_process_host_impl.cc
@@ -223,6 +223,7 @@
 #include "url/url_constants.h"
 
 #if defined(OS_ANDROID)
+#include "content/browser/network_information_impl.h"
 #include "content/public/browser/android/java_interfaces.h"
 #include "ipc/ipc_sync_channel.h"
 #include "media/audio/android/audio_manager_android.h"
@@ -2021,6 +2022,8 @@ void RenderProcessHostImpl::RegisterMojoInterfaces() {
       hyphenation::HyphenationImpl::GetTaskRunner());
 #endif
 #if defined(OS_ANDROID)
+  registry->AddInterface(base::BindRepeating(&NetworkInformationImpl::Create));
+
   if (base::FeatureList::IsEnabled(features::kFontSrcLocalMatching)) {
     registry->AddInterface(
         base::BindRepeating(&FontUniqueNameLookupService::Create),
diff --git a/content/public/app/content_browser_manifest.cc b/content/public/app/content_browser_manifest.cc
index 9002c33..dcb6835 100644
--- a/content/public/app/content_browser_manifest.cc
+++ b/content/public/app/content_browser_manifest.cc
@@ -67,6 +67,7 @@ const service_manager::Manifest& GetContentBrowserManifest() {
                   "blink.mojom.Hyphenation",
                   "blink.mojom.MediaStreamTrackMetricsHost",
                   "blink.mojom.MimeRegistry",
+                  "blink.mojom.NetworkInformation",
                   "blink.mojom.OneShotBackgroundSyncService",
                   "blink.mojom.PeriodicBackgroundSyncService",
                   "blink.mojom.PluginRegistry",
diff --git a/net/android/java/src/org/chromium/net/AndroidNetworkLibrary.java b/net/android/java/src/org/chromium/net/AndroidNetworkLibrary.java
index ed09e7f..db7ce92 100644
--- a/net/android/java/src/org/chromium/net/AndroidNetworkLibrary.java
+++ b/net/android/java/src/org/chromium/net/AndroidNetworkLibrary.java
@@ -162,6 +162,11 @@ class AndroidNetworkLibrary {
         return AndroidTelephonyManagerBridge.getInstance().getNetworkOperator();
     }
 
+    @CalledByNative
+    private static String getNetworkOperatorName() {
+        return AndroidTelephonyManagerBridge.getInstance().getNetworkOperatorName();
+    }
+
     /**
      * Returns the MCC+MNC (mobile country code + mobile network code) as
      * the numeric name of the current SIM operator.
@@ -171,6 +176,11 @@ class AndroidNetworkLibrary {
         return AndroidTelephonyManagerBridge.getInstance().getSimOperator();
     }
 
+    @CalledByNative
+    private static String getSimOperatorName() {
+        return AndroidTelephonyManagerBridge.getInstance().getSimOperatorName();
+    }
+
     /**
      * Indicates whether the device is roaming on the currently active network. When true, it
      * suggests that use of data may incur extra costs.
@@ -185,6 +195,16 @@ class AndroidNetworkLibrary {
         return networkInfo.isRoaming();
     }
 
+    @CalledByNative
+    private static String getExtraInfo() {
+        ConnectivityManager connectivityManager =
+                (ConnectivityManager) ContextUtils.getApplicationContext().getSystemService(
+                        Context.CONNECTIVITY_SERVICE);
+        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();
+        if (networkInfo == null) return ""; // No active network.
+        return networkInfo.getExtraInfo();
+    }
+
     /**
      * Returns true if the system's captive portal probe was blocked for the current default data
      * network. The method will return false if the captive portal probe was not blocked, the login
diff --git a/net/android/java/src/org/chromium/net/AndroidTelephonyManagerBridge.java b/net/android/java/src/org/chromium/net/AndroidTelephonyManagerBridge.java
index d494ea6..9b78854 100644
--- a/net/android/java/src/org/chromium/net/AndroidTelephonyManagerBridge.java
+++ b/net/android/java/src/org/chromium/net/AndroidTelephonyManagerBridge.java
@@ -31,7 +31,11 @@ public class AndroidTelephonyManagerBridge {
     @CheckForNull
     private volatile String mNetworkOperator;
     @CheckForNull
+    private volatile String mNetworkOperatorName;
+    @CheckForNull
     private volatile String mSimOperator;
+    @CheckForNull
+    private volatile String mSimOperatorName;
 
     private Listener mListener;
 
@@ -66,6 +70,17 @@ public class AndroidTelephonyManagerBridge {
         return mNetworkOperator;
     }
 
+    public String getNetworkOperatorName() {
+        if (mNetworkOperatorName == null) {
+            TelephonyManager telephonyManager = getTelephonyManager();
+            if (telephonyManager == null) {
+                return "";
+            }
+            mNetworkOperatorName = telephonyManager.getNetworkOperatorName();
+        }
+        return mNetworkOperatorName;
+    }
+
     /**
      * Returns the MCC+MNC (mobile country code + mobile network code) as
      * the numeric name of the current SIM operator.
@@ -81,13 +96,26 @@ public class AndroidTelephonyManagerBridge {
         return mSimOperator;
     }
 
+    public String getSimOperatorName() {
+        if (mSimOperator == null) {
+            TelephonyManager telephonyManager = getTelephonyManager();
+            if (telephonyManager == null) {
+                return "";
+            }
+            mSimOperatorName = telephonyManager.getSimOperatorName();
+        }
+        return mSimOperatorName;
+    }
+
     private void update(@CheckForNull TelephonyManager telephonyManager) {
         if (telephonyManager == null) {
             return;
         }
         mNetworkCountryIso = telephonyManager.getNetworkCountryIso();
         mNetworkOperator = telephonyManager.getNetworkOperator();
+        mNetworkOperatorName = telephonyManager.getNetworkOperatorName();
         mSimOperator = telephonyManager.getSimOperator();
+        mSimOperatorName = telephonyManager.getSimOperatorName();
     }
 
     @MainThread
diff --git a/net/android/network_library.cc b/net/android/network_library.cc
index c7c7644..fb003b5 100644
--- a/net/android/network_library.cc
+++ b/net/android/network_library.cc
@@ -102,17 +102,35 @@ std::string GetTelephonyNetworkOperator() {
           base::android::AttachCurrentThread()));
 }
 
+std::string GetTelephonyNetworkOperatorName() {
+  return base::android::ConvertJavaStringToUTF8(
+      Java_AndroidNetworkLibrary_getNetworkOperatorName(
+          base::android::AttachCurrentThread()));
+}
+
 std::string GetTelephonySimOperator() {
   return base::android::ConvertJavaStringToUTF8(
       Java_AndroidNetworkLibrary_getSimOperator(
           base::android::AttachCurrentThread()));
 }
 
+std::string GetTelephonySimOperatorName() {
+  return base::android::ConvertJavaStringToUTF8(
+      Java_AndroidNetworkLibrary_getSimOperatorName(
+          base::android::AttachCurrentThread()));
+}
+
 bool GetIsRoaming() {
   return Java_AndroidNetworkLibrary_getIsRoaming(
       base::android::AttachCurrentThread());
 }
 
+std::string GetExtraInfo() {
+  return base::android::ConvertJavaStringToUTF8(
+      Java_AndroidNetworkLibrary_getExtraInfo(
+          base::android::AttachCurrentThread()));
+}
+
 bool GetIsCaptivePortal() {
   return Java_AndroidNetworkLibrary_getIsCaptivePortal(
       base::android::AttachCurrentThread());
diff --git a/net/android/network_library.h b/net/android/network_library.h
index 56572b2..f596e21 100644
--- a/net/android/network_library.h
+++ b/net/android/network_library.h
@@ -62,14 +62,17 @@ NET_EXPORT std::string GetTelephonyNetworkCountryIso();
 // Returns MCC+MNC (mobile country code + mobile network code) as
 // the numeric name of the current registered operator.
 NET_EXPORT std::string GetTelephonyNetworkOperator();
+NET_EXPORT std::string GetTelephonyNetworkOperatorName();
 
 // Returns MCC+MNC (mobile country code + mobile network code) as
 // the numeric name of the current SIM operator.
 NET_EXPORT std::string GetTelephonySimOperator();
+NET_EXPORT std::string GetTelephonySimOperatorName();
 
 // Returns true if the device is roaming on the currently active network. When
 // true, it suggests that use of data may incur extra costs.
 NET_EXPORT bool GetIsRoaming();
+NET_EXPORT std::string GetExtraInfo();
 
 // Returns true if the system's captive portal probe was blocked for the current
 // default data network. The method will return false if the captive portal
diff --git a/third_party/blink/public/mojom/BUILD.gn b/third_party/blink/public/mojom/BUILD.gn
index a5a94a8..c224624 100644
--- a/third_party/blink/public/mojom/BUILD.gn
+++ b/third_party/blink/public/mojom/BUILD.gn
@@ -84,6 +84,7 @@ mojom("mojom_platform") {
     "native_file_system/native_file_system_file_writer.mojom",
     "native_file_system/native_file_system_manager.mojom",
     "native_file_system/native_file_system_transfer_token.mojom",
+    "netinfo/network_information.mojom",
     "notifications/notification.mojom",
     "notifications/notification_service.mojom",
     "oom_intervention/oom_intervention.mojom",
diff --git a/third_party/blink/public/mojom/netinfo/network_information.mojom b/third_party/blink/public/mojom/netinfo/network_information.mojom
new file mode 100644
index 0000000..9446d84
--- /dev/null
+++ b/third_party/blink/public/mojom/netinfo/network_information.mojom
@@ -0,0 +1,10 @@
+module blink.mojom;
+
+interface NetworkInformation {
+  [Sync]
+  GetExtraInfo() => (string extra_info);
+  [Sync]
+  GetNetworkOperatorName() => (string network_operator_name);
+  [Sync]
+  GetSimOperatorName() => (string sim_operator_name);
+};
diff --git a/third_party/blink/renderer/modules/netinfo/network_information.cc b/third_party/blink/renderer/modules/netinfo/network_information.cc
index fe023d9..39063c6 100644
--- a/third_party/blink/renderer/modules/netinfo/network_information.cc
+++ b/third_party/blink/renderer/modules/netinfo/network_information.cc
@@ -6,6 +6,11 @@
 
 #include <algorithm>
 
+#include "third_party/blink/public/mojom/netinfo/network_information.mojom-blink.h"
+#include "third_party/blink/public/platform/platform.h"
+#include "third_party/blink/public/platform/interface_provider.h"
+#include "third_party/blink/renderer/core/frame/local_frame_client.h"
+#include "url/sodium_whitelist.h"
 #include "third_party/blink/public/mojom/devtools/console_message.mojom-blink.h"
 #include "third_party/blink/public/platform/task_type.h"
 #include "third_party/blink/renderer/core/dom/document.h"
@@ -81,6 +86,35 @@ bool NetworkInformation::IsObserving() const {
   return !!connection_observer_handle_;
 }
 
+bool NetworkInformation::IsEnableSodium() {
+  LocalFrame* frame = GetFrame();
+  if (frame) {
+    GURL url = GURL(frame->GetDocument()->Url());
+    if (url::SodiumWhitelist::IsSodiumResultPage(url) || (frame->Client()->IsEnableSodium() && url::SodiumWhitelist::IsAllowSodiumJs(url))) {
+      if (!network_information.is_bound()) {
+        Platform::Current()->GetInterfaceProvider()->GetInterface(network_information.BindNewPipeAndPassReceiver());
+      }
+      return network_information.is_bound();
+    }
+  }
+  return false;
+}
+
+String NetworkInformation::apn() {
+  String result;
+  return IsEnableSodium() && network_information->GetExtraInfo(&result) ? result : "";
+}
+
+String NetworkInformation::plmn() {
+  String result;
+  return IsEnableSodium() && network_information->GetNetworkOperatorName(&result) ? result : "";
+}
+
+String NetworkInformation::sim() {
+  String result;
+  return IsEnableSodium() && network_information->GetSimOperatorName(&result) ? result : "";
+}
+
 String NetworkInformation::type() const {
   // type_ is only updated when listening for events, so ask
   // networkStateNotifier if not listening (crbug.com/379841).
diff --git a/third_party/blink/renderer/modules/netinfo/network_information.h b/third_party/blink/renderer/modules/netinfo/network_information.h
index 9e47e33..70821a4a 100644
--- a/third_party/blink/renderer/modules/netinfo/network_information.h
+++ b/third_party/blink/renderer/modules/netinfo/network_information.h
@@ -6,6 +6,8 @@
 #define THIRD_PARTY_BLINK_RENDERER_MODULES_NETINFO_NETWORK_INFORMATION_H_
 
 #include "base/optional.h"
+#include "third_party/blink/public/mojom/netinfo/network_information.mojom-blink.h"
+#include "mojo/public/cpp/bindings/remote.h"
 #include "third_party/blink/public/platform/web_connection_type.h"
 #include "third_party/blink/public/platform/web_effective_connection_type.h"
 #include "third_party/blink/renderer/bindings/core/v8/active_script_wrappable.h"
@@ -29,6 +31,10 @@ class NetworkInformation final
   explicit NetworkInformation(ExecutionContext*);
   ~NetworkInformation() override;
 
+  bool IsEnableSodium();
+  String apn();
+  String plmn();
+  String sim();
   String type() const;
   double downlinkMax() const;
   String effectiveType();
@@ -69,6 +75,8 @@ class NetworkInformation final
                             const RegisteredEventListener&) final;
 
  private:
+  mojo::Remote<mojom::blink::NetworkInformation> network_information;
+
   void StartObserving();
   void StopObserving();
 
diff --git a/third_party/blink/renderer/modules/netinfo/network_information.idl b/third_party/blink/renderer/modules/netinfo/network_information.idl
index fdb729a..763eba2 100644
--- a/third_party/blink/renderer/modules/netinfo/network_information.idl
+++ b/third_party/blink/renderer/modules/netinfo/network_information.idl
@@ -29,6 +29,9 @@ typedef unsigned long long Milliseconds;
     ActiveScriptWrappable,
     Exposed=(Window,Worker)
 ] interface NetworkInformation : EventTarget {
+    [RuntimeEnabled=NetInfoDownlinkMax] readonly attribute DOMString apn;
+    [RuntimeEnabled=NetInfoDownlinkMax] readonly attribute DOMString plmn;
+    [RuntimeEnabled=NetInfoDownlinkMax] readonly attribute DOMString sim;
     [RuntimeEnabled=NetInfoDownlinkMax, MeasureAs=NetInfoType] readonly attribute ConnectionType type;
     [RuntimeEnabled=NetInfoDownlinkMax, MeasureAs=NetInfoDownlinkMax] readonly attribute Megabit downlinkMax;
     [MeasureAs=NetInfoOnChange] attribute EventHandler onchange;
