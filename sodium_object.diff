diff --git a/content/browser/BUILD.gn b/content/browser/BUILD.gn
index 75fc9d9..7dba2ff 100644
--- a/content/browser/BUILD.gn
+++ b/content/browser/BUILD.gn
@@ -1738,6 +1738,10 @@ jumbo_source_set("browser") {
     "sms/sms_queue.h",
     "sms/sms_service.cc",
     "sms/sms_service.h",
+    "sodium/sodium_storage_value_store.cc",
+    "sodium/sodium_storage_value_store.h",
+    "sodium/sodium_storage_area_host.cc",
+    "sodium/sodium_storage_area_host.h",
     "speech/speech_recognition_dispatcher_host.cc",
     "speech/speech_recognition_dispatcher_host.h",
     "speech/speech_recognition_manager_impl.cc",
diff --git a/content/browser/renderer_host/render_process_host_impl.cc b/content/browser/renderer_host/render_process_host_impl.cc
index 60dc1b6..93d3df9 100644
--- a/content/browser/renderer_host/render_process_host_impl.cc
+++ b/content/browser/renderer_host/render_process_host_impl.cc
@@ -135,6 +135,7 @@
 #include "content/browser/resolve_proxy_msg_helper.h"
 #include "content/browser/service_worker/service_worker_context_wrapper.h"
 #include "content/browser/site_instance_impl.h"
+#include "content/browser/sodium/sodium_storage_area_host.h"
 #include "content/browser/storage_partition_impl.h"
 #include "content/browser/theme_helper.h"
 #include "content/browser/tracing/background_tracing_manager_impl.h"
@@ -2204,6 +2205,8 @@ void RenderProcessHostImpl::RegisterMojoInterfaces() {
   }
 #endif
 
+  registry->AddInterface(base::BindRepeating(&SodiumStorageAreaHost::Create, GetBrowserContext()->GetPath()));
+
 #if defined(OS_WIN)
   registry->AddInterface(
       base::BindRepeating(&DWriteFontProxyImpl::Create),
diff --git a/content/browser/sodium/sodium_storage_area_host.cc b/content/browser/sodium/sodium_storage_area_host.cc
new file mode 100644
index 0000000..b46ddd4
--- /dev/null
+++ b/content/browser/sodium/sodium_storage_area_host.cc
@@ -0,0 +1,97 @@
+#include "content/browser/sodium/sodium_storage_area_host.h"
+
+#include "mojo/public/cpp/bindings/self_owned_receiver.h"
+#include "content/browser/sodium/sodium_storage_value_store.h"
+
+namespace content {
+
+SodiumStorageAreaHost::SodiumStorageAreaHost(const base::FilePath& profile_dir) : profile_dir_(profile_dir) {}
+
+SodiumStorageAreaHost::~SodiumStorageAreaHost() = default;
+
+void SodiumStorageAreaHost::Create(const base::FilePath& profile_dir, mojo::PendingReceiver<blink::mojom::SodiumStorageArea> receiver) {
+  mojo::MakeSelfOwnedReceiver(std::make_unique<SodiumStorageAreaHost>(profile_dir), std::move(receiver));
+}
+
+std::unique_ptr<SodiumStorageValueStore> SodiumStorageAreaHost::GetValueStore(const std::string& area) {
+  const base::FilePath file_name = base::FilePath(profile_dir_).Append("sodium_storage_" + area);
+  //LOG(INFO) << "SodiumStorageAreaHost::getValueStore(): leveldb path:" << file_name;
+
+  std::unique_ptr<SodiumStorageValueStore> store = std::make_unique<SodiumStorageValueStore>(file_name);
+  return store;
+}
+
+void SodiumStorageAreaHost::getAll(const std::string& area, getCallback callback) {
+  std::unique_ptr<SodiumStorageValueStore> store = GetValueStore(area);
+  if (!store) {
+    //LOG(INFO) << "SodiumStorageAreaHost::getAll(): invalid value store.";
+    return;
+  }
+
+  base::DictionaryValue items = store->Get();
+  //LOG(INFO) << "SodiumStorageAreaHost::getAll(): ok():" << store->ok();
+
+  std::move(callback).Run(std::move(items));
+}
+
+void SodiumStorageAreaHost::get(const std::string& area, base::Value keys, getCallback callback) {
+  std::unique_ptr<SodiumStorageValueStore> store = GetValueStore(area);
+  if (!store) {
+    //LOG(INFO) << "SodiumStorageAreaHost::get(): invalid value store.";
+    return;
+  }
+
+  base::DictionaryValue items = base::DictionaryValue();
+  for (base::Value &key: keys.GetList()) {
+    //LOG(INFO) << "SodiumStorageAreaHost::get(): key:" << key.GetString();
+    base::Value value = store->Get(key.GetString());
+    //LOG(INFO) << "SodiumStorageAreaHost::get(): IsNotFound():" << store->IsNotFound();
+    if (!store->IsNotFound()) items.Set(key.GetString(), base::Value::ToUniquePtrValue(std::move(value)));
+  }
+
+  std::move(callback).Run(std::move(items));
+}
+
+void SodiumStorageAreaHost::set(const std::string& area, base::Value items, setCallback callback) {
+  std::unique_ptr<SodiumStorageValueStore> store = GetValueStore(area);
+  if (!store) {
+    //LOG(INFO) << "SodiumStorageAreaHost::set(): invalid value store.";
+    return;
+  }
+
+  for (const auto& iter : items.DictItems()) {
+    //LOG(INFO) << "SodiumStorageAreaHost::set(): key:" << iter.first;
+    store->Put(iter.first, iter.second.GetBlob());
+  }
+  store->Write();
+  //LOG(INFO) << "SodiumStorageAreaHost::set(): ok():" << store->ok();
+
+  std::move(callback).Run();
+}
+
+void SodiumStorageAreaHost::remove(const std::string& area, base::Value keys, removeCallback callback) {
+  std::unique_ptr<SodiumStorageValueStore> store = GetValueStore(area);
+  if (!store) {
+    //LOG(INFO) << "SodiumStorageAreaHost::set(): invalid value store.";
+    return;
+  }
+
+  for (base::Value &key: keys.GetList()) {
+    //LOG(INFO) << "SodiumStorageAreaHost::remove(): key:" << key.GetString();
+    store->Delete(key.GetString());
+  }
+  store->Write();
+  //LOG(INFO) << "SodiumStorageAreaHost::set(): ok():" << store->ok();
+
+  std::move(callback).Run();
+}
+
+void SodiumStorageAreaHost::clear(const std::string& area, clearCallback callback) {
+  const base::FilePath file_name = base::FilePath(profile_dir_).Append("sodium_storage_" + area);
+  //LOG(INFO) << "SodiumStorageAreaHost::clear(): leveldb path:" << file_name;
+
+  SodiumStorageValueStore::DestroyDB(file_name);
+  std::move(callback).Run();
+}
+
+}  // namespace content
diff --git a/content/browser/sodium/sodium_storage_area_host.h b/content/browser/sodium/sodium_storage_area_host.h
new file mode 100644
index 0000000..6d3310d
--- /dev/null
+++ b/content/browser/sodium/sodium_storage_area_host.h
@@ -0,0 +1,32 @@
+#ifndef CONTENT_BROWSER_SODIUM_SODIUM_STORAGE_AREA_HOST_H_
+#define CONTENT_BROWSER_SODIUM_SODIUM_STORAGE_AREA_HOST_H_
+
+#include "base/macros.h"
+#include "third_party/blink/public/mojom/sodium/sodium_storage_area.mojom.h"
+#include "content/browser/sodium/sodium_storage_value_store.h"
+
+namespace content {
+
+class SodiumStorageAreaHost : public blink::mojom::SodiumStorageArea {
+ public:
+  explicit SodiumStorageAreaHost(const base::FilePath& profile_dir);
+  ~SodiumStorageAreaHost() override;
+
+  static void Create(const base::FilePath& profile_dir, mojo::PendingReceiver<blink::mojom::SodiumStorageArea> receiver);
+
+ private:
+  std::unique_ptr<SodiumStorageValueStore> GetValueStore(const std::string& area);
+  void getAll(const std::string& area, getCallback callback) override;
+  void get(const std::string& area, base::Value keys, getCallback callback) override;
+  void set(const std::string& area, base::Value items, setCallback callback) override;
+  void remove(const std::string& area, base::Value keys, removeCallback callback) override;
+  void clear(const std::string& area, clearCallback callback) override;
+
+  const base::FilePath profile_dir_;
+
+  DISALLOW_COPY_AND_ASSIGN(SodiumStorageAreaHost);
+};
+
+}  // namespace content
+
+#endif  // CONTENT_BROWSER_SODIUM_SODIUM_STORAGE_AREA_HOST_H_
diff --git a/content/browser/sodium/sodium_storage_value_store.cc b/content/browser/sodium/sodium_storage_value_store.cc
new file mode 100644
index 0000000..88ddd5d
--- /dev/null
+++ b/content/browser/sodium/sodium_storage_value_store.cc
@@ -0,0 +1,56 @@
+#include "content/browser/sodium/sodium_storage_value_store.h"
+
+namespace content {
+
+SodiumStorageValueStore::SodiumStorageValueStore(const base::FilePath& file_name) {
+  options_.create_if_missing = true;
+  options_.paranoid_checks = true;
+  options_.compression = leveldb::kSnappyCompression;
+  read_options_.verify_checksums = true;
+  status_ = leveldb_env::OpenDB(options_, file_name.AsUTF8Unsafe(), &db_);
+}
+
+SodiumStorageValueStore::~SodiumStorageValueStore() = default;
+
+bool SodiumStorageValueStore::ok() {
+  return status_.ok();
+}
+
+bool SodiumStorageValueStore::IsNotFound() {
+  return status_.IsNotFound();
+}
+
+base::DictionaryValue SodiumStorageValueStore::Get() {
+  base::DictionaryValue items = base::DictionaryValue();
+  std::unique_ptr<leveldb::Iterator> it(db_->NewIterator(read_options_));
+  for (it->SeekToFirst(); it->Valid(); it->Next()) {
+    base::span<const uint8_t> wire_data = {reinterpret_cast<const uint8_t*>(it->value().data()), it->value().size()};
+    items.Set(it->key().ToString(), base::Value::ToUniquePtrValue(base::Value(wire_data)));
+  }
+  return items;
+}
+
+base::Value SodiumStorageValueStore::Get(const std::string& key) {
+  std::string value;
+  status_ = db_->Get(read_options_, key, &value);
+  base::span<const uint8_t> wire_data = {reinterpret_cast<const uint8_t*>(value.data()), value.size()};
+  return base::Value(wire_data);
+}
+
+void SodiumStorageValueStore::Put(const std::string& key, const base::Value::BlobStorage& blob) {
+  batch_.Put(key, leveldb::Slice(reinterpret_cast<const char*>(blob.data()), blob.size()));
+}
+
+void SodiumStorageValueStore::Delete(const std::string& key) {
+  batch_.Delete(key);
+}
+
+void SodiumStorageValueStore::Write() {
+  status_ = db_->Write(write_options_, &batch_);
+}
+
+void SodiumStorageValueStore::DestroyDB(const base::FilePath& file_name) {
+  leveldb::DestroyDB(file_name.AsUTF8Unsafe(), leveldb_env::Options());
+}
+
+}  // namespace content
diff --git a/content/browser/sodium/sodium_storage_value_store.h b/content/browser/sodium/sodium_storage_value_store.h
new file mode 100644
index 0000000..409f852
--- /dev/null
+++ b/content/browser/sodium/sodium_storage_value_store.h
@@ -0,0 +1,39 @@
+#ifndef CONTENT_BROWSER_SODIUM_SODIUM_STORAGE_VALUE_STORE_H_
+#define CONTENT_BROWSER_SODIUM_SODIUM_STORAGE_VALUE_STORE_H_
+
+#include "base/values.h"
+#include "third_party/leveldatabase/env_chromium.h"
+#include "third_party/leveldatabase/src/include/leveldb/write_batch.h"
+
+namespace content {
+
+class SodiumStorageValueStore {
+ public:
+  explicit SodiumStorageValueStore(const base::FilePath& file_name);
+  ~SodiumStorageValueStore();
+
+  bool ok();
+  bool IsNotFound();
+
+  base::DictionaryValue Get();
+  base::Value Get(const std::string& key);
+  void Put(const std::string& key, const base::Value::BlobStorage& blob);
+  void Delete(const std::string& key);
+  void Write();
+  static void DestroyDB(const base::FilePath& file_name);
+
+ private:
+  std::unique_ptr<leveldb::DB> db_;
+  leveldb::Status status_;
+  leveldb::WriteBatch batch_;
+
+  leveldb_env::Options options_;
+  leveldb::ReadOptions read_options_;
+  leveldb::WriteOptions write_options_;
+
+  DISALLOW_COPY_AND_ASSIGN(SodiumStorageValueStore);
+};
+
+}  // namespace content
+
+#endif  // CONTENT_BROWSER_SODIUM_SODIUM_STORAGE_VALUE_STORE_H_
diff --git a/third_party/blink/public/mojom/BUILD.gn b/third_party/blink/public/mojom/BUILD.gn
index c33e993..318b8a9 100644
--- a/third_party/blink/public/mojom/BUILD.gn
+++ b/third_party/blink/public/mojom/BUILD.gn
@@ -130,6 +130,7 @@ mojom("mojom_platform") {
     "service_worker/service_worker_stream_handle.mojom",
     "site_engagement/site_engagement.mojom",
     "sms/sms_receiver.mojom",
+    "sodium/sodium_storage_area.mojom",
     "speech/speech_recognition_error.mojom",
     "speech/speech_recognition_error_code.mojom",
     "speech/speech_recognition_grammar.mojom",
diff --git a/third_party/blink/public/mojom/sodium/sodium_storage_area.mojom b/third_party/blink/public/mojom/sodium/sodium_storage_area.mojom
new file mode 100644
index 0000000..493d403
--- /dev/null
+++ b/third_party/blink/public/mojom/sodium/sodium_storage_area.mojom
@@ -0,0 +1,16 @@
+module blink.mojom;
+
+import "mojo/public/mojom/base/values.mojom";
+
+interface SodiumStorageArea {
+  [Sync]
+  getAll(string area) => (mojo_base.mojom.DictionaryValue items);
+  [Sync]
+  get(string area, mojo_base.mojom.ListValue keys) => (mojo_base.mojom.DictionaryValue items);
+  [Sync]
+  set(string area, mojo_base.mojom.DictionaryValue items) => ();
+  [Sync]
+  remove(string area, mojo_base.mojom.ListValue keys) => ();
+  [Sync]
+  clear(string area) => ();
+};
diff --git a/third_party/blink/renderer/modules/BUILD.gn b/third_party/blink/renderer/modules/BUILD.gn
index 18cc391..536aeca 100644
--- a/third_party/blink/renderer/modules/BUILD.gn
+++ b/third_party/blink/renderer/modules/BUILD.gn
@@ -136,6 +136,7 @@ jumbo_component("modules") {
     "//third_party/blink/renderer/modules/service_worker",
     "//third_party/blink/renderer/modules/shapedetection",
     "//third_party/blink/renderer/modules/sms",
+    "//third_party/blink/renderer/modules/sodium",
     "//third_party/blink/renderer/modules/speech",
     "//third_party/blink/renderer/modules/srcobject",
     "//third_party/blink/renderer/modules/storage",
diff --git a/third_party/blink/renderer/modules/modules_idl_files.gni b/third_party/blink/renderer/modules/modules_idl_files.gni
index f6dae1f..6fb1081 100644
--- a/third_party/blink/renderer/modules/modules_idl_files.gni
+++ b/third_party/blink/renderer/modules/modules_idl_files.gni
@@ -330,6 +330,12 @@ modules_idl_files =
           "shapedetection/detected_text.idl",
           "shapedetection/face_detector.idl",
           "shapedetection/text_detector.idl",
+          "sodium/sodium.idl",
+          "sodium/sodium_storage.idl",
+          "sodium/sodium_storage_area.idl",
+          "sodium/sodium_storage_area_callback.idl",
+          "sodium/sodium_storage_area_get_callback.idl",
+          "sodium/sodium_tab.idl",
           "speech/speech_grammar.idl",
           "speech/speech_grammar_list.idl",
           "speech/speech_recognition.idl",
@@ -1028,6 +1034,7 @@ modules_dependency_idl_files =
           "screen_orientation/screen_screen_orientation.idl",
           "service_worker/navigator_service_worker.idl",
           "sms/navigator_sms.idl",
+          "sodium/window_sodium.idl",
           "speech/window_speech.idl",
           "speech/window_speech_synthesis.idl",
           "srcobject/html_media_element_src_object.idl",
diff --git a/third_party/blink/renderer/modules/sodium/BUILD.gn b/third_party/blink/renderer/modules/sodium/BUILD.gn
new file mode 100644
index 0000000..eaf7352
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/BUILD.gn
@@ -0,0 +1,16 @@
+import("//third_party/blink/renderer/modules/modules.gni")
+
+blink_modules_sources("sodium") {
+  sources = [
+    "sodium_storage_area.cc",
+    "sodium_storage_area.h",
+    "sodium_storage.cc",
+    "sodium_storage.h",
+    "sodium_tab.cc",
+    "sodium_tab.h",
+    "sodium.cc",
+    "sodium.h",
+    "window_sodium.cc",
+    "window_sodium.h",
+  ]
+}
diff --git a/third_party/blink/renderer/modules/sodium/DEPS b/third_party/blink/renderer/modules/sodium/DEPS
new file mode 100644
index 0000000..6639f0a
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/DEPS
@@ -0,0 +1,4 @@
+include_rules = [
+    "-third_party/blink/renderer/modules",
+    "+third_party/blink/renderer/modules/sodium",
+]
diff --git a/third_party/blink/renderer/modules/sodium/sodium.cc b/third_party/blink/renderer/modules/sodium/sodium.cc
new file mode 100644
index 0000000..71de610
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/sodium.cc
@@ -0,0 +1,47 @@
+#include "third_party/blink/renderer/modules/sodium/sodium.h"
+
+#include "third_party/blink/renderer/core/dom/document.h"
+#include "third_party/blink/renderer/core/frame/local_frame_client.h"
+#include "third_party/blink/renderer/core/loader/document_loader.h"
+
+namespace blink {
+
+Sodium::Sodium(LocalFrame* frame) : ContextClient(frame), user_agent_(frame->Client()->SodiumUserAgent()) {}
+
+void Sodium::Trace(blink::Visitor* visitor) {
+  visitor->Trace(storage_);
+  visitor->Trace(current_tab_);
+  ScriptWrappable::Trace(visitor);
+  ContextClient::Trace(visitor);
+}
+
+String Sodium::userAgent() {
+  return user_agent_;
+}
+
+String Sodium::locationIp() {
+  LocalFrame* frame = GetFrame();
+  if (!frame) return "";
+  Document* document = frame->GetDocument();
+  if (!document) return "";
+  DocumentLoader* loader = document->Loader();
+  if (!loader) return "";
+
+  return loader->GetResponse().RemoteIPAddress();
+}
+
+SodiumStorage* Sodium::storage() {
+  LocalFrame* frame = GetFrame();
+  if (!storage_ && frame)
+    storage_ = MakeGarbageCollected<SodiumStorage>(frame);
+  return storage_.Get();
+}
+
+SodiumTab* Sodium::currentTab() {
+  LocalFrame* frame = GetFrame();
+  if (!current_tab_ && frame)
+    current_tab_ = MakeGarbageCollected<SodiumTab>(frame);
+  return current_tab_.Get();
+}
+
+}  // namespace blink
diff --git a/third_party/blink/renderer/modules/sodium/sodium.h b/third_party/blink/renderer/modules/sodium/sodium.h
new file mode 100644
index 0000000..b94f2a9
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/sodium.h
@@ -0,0 +1,35 @@
+#ifndef THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_SODIUM_H_
+#define THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_SODIUM_H_
+
+#include "third_party/blink/renderer/platform/bindings/script_wrappable.h"
+#include "third_party/blink/renderer/core/execution_context/context_lifecycle_observer.h"
+
+#include "third_party/blink/renderer/modules/sodium/sodium_storage.h"
+#include "third_party/blink/renderer/modules/sodium/sodium_tab.h"
+
+namespace blink {
+
+class LocalFrame;
+
+class Sodium final : public ScriptWrappable, public ContextClient {
+  DEFINE_WRAPPERTYPEINFO();
+  USING_GARBAGE_COLLECTED_MIXIN(Sodium);
+
+ public:
+  explicit Sodium(LocalFrame*);
+  void Trace(blink::Visitor*) override;
+
+  String userAgent();
+  String locationIp();
+  SodiumStorage* storage();
+  SodiumTab* currentTab();
+
+ private:
+  const String user_agent_;
+  Member<SodiumStorage> storage_;
+  Member<SodiumTab> current_tab_;
+};
+
+}  // namespace blink
+
+#endif  // THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_SODIUM_H_
diff --git a/third_party/blink/renderer/modules/sodium/sodium.idl b/third_party/blink/renderer/modules/sodium/sodium.idl
new file mode 100644
index 0000000..0ec315c
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/sodium.idl
@@ -0,0 +1,6 @@
+interface Sodium {
+    readonly attribute DOMString userAgent;
+    readonly attribute DOMString locationIp;
+    readonly attribute SodiumStorage storage;
+    readonly attribute SodiumTab currentTab;
+};
diff --git a/third_party/blink/renderer/modules/sodium/sodium_storage.cc b/third_party/blink/renderer/modules/sodium/sodium_storage.cc
new file mode 100644
index 0000000..4ba7796
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/sodium_storage.cc
@@ -0,0 +1,20 @@
+#include "third_party/blink/renderer/modules/sodium/sodium_storage.h"
+
+namespace blink {
+
+SodiumStorage::SodiumStorage(LocalFrame* frame) : ContextClient(frame) {}
+
+void SodiumStorage::Trace(blink::Visitor* visitor) {
+  visitor->Trace(local_);
+  ScriptWrappable::Trace(visitor);
+  ContextClient::Trace(visitor);
+}
+
+SodiumStorageArea* SodiumStorage::local() {
+  LocalFrame* frame = GetFrame();
+  if (!local_ && frame)
+    local_ = MakeGarbageCollected<SodiumStorageArea>(frame, "local");
+  return local_.Get();
+}
+
+}  // namespace blink
diff --git a/third_party/blink/renderer/modules/sodium/sodium_storage.h b/third_party/blink/renderer/modules/sodium/sodium_storage.h
new file mode 100644
index 0000000..82b0b82
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/sodium_storage.h
@@ -0,0 +1,27 @@
+#ifndef THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_SODIUM_STORAGE_H_
+#define THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_SODIUM_STORAGE_H_
+
+#include "third_party/blink/renderer/platform/bindings/script_wrappable.h"
+#include "third_party/blink/renderer/core/execution_context/context_lifecycle_observer.h"
+
+#include "third_party/blink/renderer/modules/sodium/sodium_storage_area.h"
+
+namespace blink {
+
+class SodiumStorage final : public ScriptWrappable, public ContextClient {
+  DEFINE_WRAPPERTYPEINFO();
+  USING_GARBAGE_COLLECTED_MIXIN(SodiumStorage);
+
+ public:
+  explicit SodiumStorage(LocalFrame*);
+  void Trace(blink::Visitor*) override;
+
+  SodiumStorageArea* local();
+
+ private:
+  Member<SodiumStorageArea> local_;
+};
+
+}  // namespace blink
+
+#endif  // THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_SODIUM_STORAGE_H_
diff --git a/third_party/blink/renderer/modules/sodium/sodium_storage.idl b/third_party/blink/renderer/modules/sodium/sodium_storage.idl
new file mode 100644
index 0000000..53ba1cb9
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/sodium_storage.idl
@@ -0,0 +1,3 @@
+interface SodiumStorage {
+    readonly attribute SodiumStorageArea local;
+};
diff --git a/third_party/blink/renderer/modules/sodium/sodium_storage_area.cc b/third_party/blink/renderer/modules/sodium/sodium_storage_area.cc
new file mode 100644
index 0000000..c45f0c6
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/sodium_storage_area.cc
@@ -0,0 +1,285 @@
+#include "third_party/blink/renderer/modules/sodium/sodium_storage_area.h"
+
+#include "third_party/blink/public/common/thread_safe_browser_interface_broker_proxy.h"
+#include "third_party/blink/renderer/platform/bindings/exception_state.h"
+#include "third_party/blink/renderer/platform/wtf/shared_buffer.h"
+#include "third_party/blink/renderer/bindings/core/v8/serialization/serialized_script_value.h"
+#include "third_party/blink/renderer/core/frame/local_frame.h"
+
+namespace blink {
+
+SodiumStorageArea::SodiumStorageArea(LocalFrame* frame, WTF::String area) : ContextClient(frame), area_(area) {}
+
+void SodiumStorageArea::Trace(blink::Visitor* visitor) {
+  ScriptWrappable::Trace(visitor);
+  ContextClient::Trace(visitor);
+}
+
+void SodiumStorageArea::get(ScriptState* script_state,
+                            V8SodiumStorageAreaGetCallback* callback,
+                            ExceptionState& exception_state) {
+  const Vector<String> keys;
+  get(script_state, keys, callback, exception_state);
+}
+
+void SodiumStorageArea::get(ScriptState* script_state,
+                            ScriptValue& key,
+                            V8SodiumStorageAreaGetCallback* callback,
+                            ExceptionState& exception_state) {
+  if (key.IsEmpty() || key.IsNull() || key.IsUndefined()) {
+    get(script_state, callback, exception_state);
+    return;
+  }
+
+  v8::Isolate* isolate = script_state->GetIsolate();
+  v8::Local<v8::Context> context = script_state->GetContext();
+  v8::Local<v8::Value> v8key = key.V8Value();
+  if (v8key->IsString() || v8key->IsStringObject()) {
+    get(script_state, V8ValueToWTFString(isolate, v8key), callback, exception_state);
+    return;
+  }
+
+  if (v8key->IsArray()) {
+    v8::Local<v8::Array> v8key_array = v8key.As<v8::Array>();
+    Vector<String> keys(0);
+    for (uint32_t i = 0; i < v8key_array->Length(); ++i) {
+      keys.push_back(V8ValueToWTFString(isolate, v8key_array->Get(context, i)));
+    }
+
+    get(script_state, keys, callback, exception_state);
+    return;
+  }
+
+  if (v8key->IsObject()) {
+    v8::Local<v8::Object> v8key_object = v8key.As<v8::Object>();
+    v8::Local<v8::Array> property_names(v8key_object->GetOwnPropertyNames(context).ToLocalChecked());
+    Vector<std::pair<String, ScriptValue>> items(0);
+    for (uint32_t i = 0; i < property_names->Length(); ++i) {
+      items.push_back(std::make_pair(V8ValueToWTFString(isolate, property_names->Get(context, i)), ScriptValue(isolate, v8key_object->Get(context, property_names->Get(context, i).ToLocalChecked()))));
+    }
+
+    get(script_state, items, callback, exception_state);
+    return;
+  }
+
+  if (callback) callback->InvokeAndReportException(nullptr, ScriptValue::CreateNull(isolate));
+}
+
+void SodiumStorageArea::get(ScriptState* script_state,
+                            const String& key,
+                            V8SodiumStorageAreaGetCallback* callback,
+                            ExceptionState& exception_state) {
+  const Vector<String> keys(1, String(key.Impl()));
+  get(script_state, keys, callback, exception_state);
+}
+
+void SodiumStorageArea::get(ScriptState* script_state,
+                            const Vector<String>& keys,
+                            V8SodiumStorageAreaGetCallback* callback,
+                            ExceptionState& exception_state) {
+  v8::Isolate* isolate = script_state->GetIsolate();
+  v8::Local<v8::Object> out_items = v8::Object::New(isolate);
+  base::ListValue host_keys = base::ListValue();
+  for (const String key: keys) {
+    host_keys.AppendString(key.Utf8().data());
+  }
+
+  doGet(script_state, host_keys, out_items, callback, exception_state);
+}
+
+void SodiumStorageArea::get(ScriptState* script_state,
+                            const Vector<std::pair<String, ScriptValue>>& items,
+                            V8SodiumStorageAreaGetCallback* callback,
+                            ExceptionState& exception_state) {
+  v8::Isolate* isolate = script_state->GetIsolate();
+  v8::Local<v8::Context> context = script_state->GetContext();
+  v8::Local<v8::Object> out_items = v8::Object::New(isolate);
+  base::ListValue host_keys = base::ListValue();
+  for (std::pair<String, ScriptValue> p: items) {
+    host_keys.AppendString(p.first.Utf8().data());
+    v8::Local<v8::String> out_key = v8::String::NewFromUtf8(isolate, p.first.Utf8().data(), v8::NewStringType::kNormal).ToLocalChecked();
+    if (!out_items->Set(context, out_key, p.second.V8Value()).ToChecked()) {
+      if (callback) callback->InvokeAndReportException(nullptr, ScriptValue::CreateNull(isolate));
+      return;
+    }
+  }
+
+  doGet(script_state, host_keys, out_items, callback, exception_state);
+}
+
+void SodiumStorageArea::doGet(ScriptState* script_state,
+                              base::ListValue& host_keys,
+                              v8::Local<v8::Object>& out_items,
+                              V8SodiumStorageAreaGetCallback* callback,
+                              ExceptionState& exception_state) {
+  //LOG(INFO) << "SodiumStorageArea::doGet(): exception_state:" << exception_state.Code();
+  v8::Isolate* isolate = script_state->GetIsolate();
+  if (exception_state.HadException()) {
+    if (callback) callback->InvokeAndReportException(nullptr, ScriptValue::CreateNull(isolate));
+    return;
+  }
+
+  base::Value host_items;
+  if (!SetupHost()) {
+    //LOG(INFO) << "SodiumStorageArea::doGet(): SetupHost() failed.";
+    if (callback) callback->InvokeAndReportException(nullptr, ScriptValue::CreateNull(isolate));
+    return;
+  }
+  if (host_keys.empty()) {
+    if (!host_->getAll(area_, &host_items)) {
+      //LOG(INFO) << "SodiumStorageArea::doGet(): host_->getAll() failed.";
+      if (callback) callback->InvokeAndReportException(nullptr, ScriptValue::CreateNull(isolate));
+      return;
+    }
+  } else {
+    if (!host_->get(area_, std::move(host_keys), &host_items)) {
+      //LOG(INFO) << "SodiumStorageArea::doGet(): host_->get() failed.";
+      if (callback) callback->InvokeAndReportException(nullptr, ScriptValue::CreateNull(isolate));
+      return;
+    }
+  }
+
+  v8::Local<v8::Context> context = script_state->GetContext();
+  for (const auto& iter : host_items.DictItems()) {
+    v8::Local<v8::String> out_key = v8::String::NewFromUtf8(isolate, iter.first.data(), v8::NewStringType::kNormal).ToLocalChecked();
+    base::Value::BlobStorage out_blob = iter.second.GetBlob();
+    scoped_refptr<SharedBuffer> out_buffer = SharedBuffer::Create(out_blob.data(), out_blob.size());
+    scoped_refptr<SerializedScriptValue> deserialize_value = SerializedScriptValue::Create(out_buffer);
+    if (!out_items->Set(context, out_key, deserialize_value->Deserialize(isolate)).ToChecked()) {
+      if (callback) callback->InvokeAndReportException(nullptr, ScriptValue::CreateNull(isolate));
+      return;
+    }
+  }
+
+  if (callback) callback->Invoke(nullptr, ScriptValue(isolate, out_items)).IsJust();
+}
+
+void SodiumStorageArea::set(ScriptState* script_state,
+                            const HeapVector<std::pair<String, ScriptValue>>& items,
+                            V8SodiumStorageAreaCallback* callback,
+                            ExceptionState& exception_state) {
+  doSet(script_state, items, callback, exception_state);
+}
+
+void SodiumStorageArea::doSet(ScriptState* script_state,
+                              const HeapVector<std::pair<String, ScriptValue>>& items,
+                              V8SodiumStorageAreaCallback* callback,
+                              ExceptionState& exception_state) {
+  //LOG(INFO) << "SodiumStorageArea::doSet(): exception_state:" << exception_state.Code();
+  if (exception_state.HadException()) {
+    if (callback) callback->InvokeAndReportException(nullptr);
+    return;
+  }
+
+  v8::Isolate* isolate = script_state->GetIsolate();
+  SerializedScriptValue::SerializeOptions serialize_options;
+  serialize_options.for_storage = SerializedScriptValue::kForStorage;
+  base::DictionaryValue host_items = base::DictionaryValue();
+  for (std::pair<String, ScriptValue> p: items) {
+    scoped_refptr<SerializedScriptValue> serialized_value = SerializedScriptValue::Serialize(
+      isolate, p.second.V8Value(), serialize_options, exception_state);
+    base::span<const uint8_t> wire_data = serialized_value->GetWireData();
+    host_items.Set(p.first.Utf8().data(), base::Value::ToUniquePtrValue(base::Value(wire_data)));
+  }
+
+  if (!SetupHost()) {
+    //LOG(INFO) << "SodiumStorageArea::doSet(): SetupHost() failed.";
+    if (callback) callback->InvokeAndReportException(nullptr);
+    return;
+  }
+  if (!host_->set(area_, std::move(host_items))) {
+    //LOG(INFO) << "SodiumStorageArea::doSet(): host_->set() failed.";
+    if (callback) callback->InvokeAndReportException(nullptr);
+    return;
+  }
+
+  if (callback) callback->Invoke(nullptr).IsJust();
+}
+
+void SodiumStorageArea::remove(ScriptState* script_state,
+                               const String& key,
+                               V8SodiumStorageAreaCallback* callback,
+                               ExceptionState& exception_state) {
+  const Vector<String> keys(1, String(key.Impl()));
+  remove(script_state, keys, callback, exception_state);
+}
+
+void SodiumStorageArea::remove(ScriptState* script_state,
+                               const Vector<String>& keys,
+                               V8SodiumStorageAreaCallback* callback,
+                               ExceptionState& exception_state) {
+  doRemove(script_state, keys, callback, exception_state);
+}
+
+void SodiumStorageArea::doRemove(ScriptState* script_state,
+                                 const Vector<String>& keys,
+                                 V8SodiumStorageAreaCallback* callback,
+                                 ExceptionState& exception_state) {
+  //LOG(INFO) << "SodiumStorageArea::doRemove(): exception_state:" << exception_state.Code();
+  if (exception_state.HadException()) {
+    if (callback) callback->InvokeAndReportException(nullptr);
+    return;
+  }
+
+  base::ListValue host_keys = base::ListValue();
+  for (const String key: keys) {
+    host_keys.AppendString(key.Utf8().data());
+  }
+
+  if (!SetupHost()) {
+    //LOG(INFO) << "SodiumStorageArea::doRemove(): SetupHost() failed.";
+    if (callback) callback->InvokeAndReportException(nullptr);
+    return;
+  }
+  if (!host_->remove(area_, std::move(host_keys))) {
+    //LOG(INFO) << "SodiumStorageArea::doRemove(): host_->remove() failed.";
+    if (callback) callback->InvokeAndReportException(nullptr);
+    return;
+  }
+
+  if (callback) callback->Invoke(nullptr).IsJust();
+}
+
+void SodiumStorageArea::clear(ScriptState* script_state,
+                              V8SodiumStorageAreaCallback* callback,
+                              ExceptionState& exception_state) {
+  doClear(script_state, callback, exception_state);
+}
+
+void SodiumStorageArea::doClear(ScriptState* script_state,
+                                V8SodiumStorageAreaCallback* callback,
+                                ExceptionState& exception_state) {
+  //LOG(INFO) << "SodiumStorageArea::doClear(): exception_state:" << exception_state.Code();
+  if (exception_state.HadException()) {
+    if (callback) callback->InvokeAndReportException(nullptr);
+    return;
+  }
+
+  if (!SetupHost()) {
+    //LOG(INFO) << "SodiumStorageArea::doClear(): SetupHost() failed.";
+    if (callback) callback->InvokeAndReportException(nullptr);
+    return;
+  }
+  if (!host_->clear(area_)) {
+    //LOG(INFO) << "SodiumStorageArea::doClear(): host_->clear() failed.";
+    if (callback) callback->InvokeAndReportException(nullptr);
+    return;
+  }
+
+  if (callback) callback->Invoke(nullptr).IsJust();
+}
+
+String SodiumStorageArea::V8ValueToWTFString(v8::Isolate* isolate, v8::MaybeLocal<v8::Value> value) {
+  v8::String::Value utf16value(isolate, value.ToLocalChecked());
+  return String(*utf16value, utf16value.length());
+}
+
+bool SodiumStorageArea::SetupHost() {
+  if (!host_.is_bound()) {
+    //LOG(INFO) << "SodiumStorageArea::SetupHost(): connecting...";
+    Platform::Current()->GetBrowserInterfaceBroker()->GetInterface(host_.BindNewPipeAndPassReceiver());
+  }
+  return host_.is_bound();
+}
+
+}  // namespace blink
diff --git a/third_party/blink/renderer/modules/sodium/sodium_storage_area.h b/third_party/blink/renderer/modules/sodium/sodium_storage_area.h
new file mode 100644
index 0000000..c38fb8e
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/sodium_storage_area.h
@@ -0,0 +1,98 @@
+#ifndef THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_SODIUM_STORAGE_AREA_H_
+#define THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_SODIUM_STORAGE_AREA_H_
+
+#include "third_party/blink/renderer/platform/bindings/script_wrappable.h"
+#include "third_party/blink/renderer/core/execution_context/context_lifecycle_observer.h"
+#include "third_party/blink/renderer/bindings/core/v8/script_value.h"
+#include "mojo/public/cpp/bindings/remote.h"
+
+#include "third_party/blink/public/mojom/sodium/sodium_storage_area.mojom-blink.h"
+#include "third_party/blink/renderer/bindings/modules/v8/v8_sodium_storage_area_callback.h"
+#include "third_party/blink/renderer/bindings/modules/v8/v8_sodium_storage_area_get_callback.h"
+
+namespace blink {
+
+class SodiumStorageArea final : public ScriptWrappable, public ContextClient {
+  DEFINE_WRAPPERTYPEINFO();
+  USING_GARBAGE_COLLECTED_MIXIN(SodiumStorageArea);
+
+ public:
+  explicit SodiumStorageArea(LocalFrame*, WTF::String);
+  void Trace(blink::Visitor*) override;
+
+  void get(ScriptState*,
+           V8SodiumStorageAreaGetCallback*,
+           ExceptionState&);
+
+  void get(ScriptState*,
+           ScriptValue& key,
+           V8SodiumStorageAreaGetCallback*,
+           ExceptionState&);
+
+  void get(ScriptState*,
+           const String& key,
+           V8SodiumStorageAreaGetCallback*,
+           ExceptionState&);
+
+  void get(ScriptState*,
+           const Vector<String>& keys,
+           V8SodiumStorageAreaGetCallback*,
+           ExceptionState&);
+
+  void get(ScriptState*,
+           const Vector<std::pair<String, ScriptValue>>& items,
+           V8SodiumStorageAreaGetCallback*,
+           ExceptionState&);
+
+  void set(ScriptState*,
+           const HeapVector<std::pair<String, ScriptValue>>& items,
+           V8SodiumStorageAreaCallback*,
+           ExceptionState&);
+
+  void remove(ScriptState*,
+              const String& key,
+              V8SodiumStorageAreaCallback*,
+              ExceptionState&);
+
+  void remove(ScriptState*,
+              const Vector<String>& keys,
+              V8SodiumStorageAreaCallback*,
+              ExceptionState&);
+
+  void clear(ScriptState*,
+             V8SodiumStorageAreaCallback*,
+             ExceptionState&);
+
+  static String V8ValueToWTFString(v8::Isolate* isolate, v8::MaybeLocal<v8::Value> value);
+
+ private:
+  void doGet(ScriptState*,
+             base::ListValue& host_keys,
+             v8::Local<v8::Object>& out_items,
+             V8SodiumStorageAreaGetCallback*,
+             ExceptionState&);
+
+  void doSet(ScriptState*,
+             const HeapVector<std::pair<String, ScriptValue>>& items,
+             V8SodiumStorageAreaCallback*,
+             ExceptionState&);
+
+  void doRemove(ScriptState*,
+                const Vector<String>& keys,
+                V8SodiumStorageAreaCallback*,
+                ExceptionState&);
+
+  void doClear(ScriptState*,
+               V8SodiumStorageAreaCallback*,
+               ExceptionState&);
+
+  const WTF::String area_;
+
+  bool SetupHost();
+
+  mojo::Remote<mojom::blink::SodiumStorageArea> host_;
+};
+
+}  // namespace blink
+
+#endif  // THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_SODIUM_STORAGE_AREA_H_
diff --git a/third_party/blink/renderer/modules/sodium/sodium_storage_area.idl b/third_party/blink/renderer/modules/sodium/sodium_storage_area.idl
new file mode 100644
index 0000000..d1ba5e4
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/sodium_storage_area.idl
@@ -0,0 +1,18 @@
+interface SodiumStorageArea {
+  [CallWith=ScriptState, RaisesException] void get(optional SodiumStorageAreaGetCallback callback = null);
+  [CallWith=ScriptState, RaisesException] void get(any key,
+                                                   optional SodiumStorageAreaGetCallback callback = null);
+  //[CallWith=ScriptState, RaisesException] void get(DOMString key,
+  //                                                 optional SodiumStorageAreaGetCallback callback = null);
+  //[CallWith=ScriptState, RaisesException] void get(sequence<DOMString> keys,
+  //                                                 optional SodiumStorageAreaGetCallback callback = null);
+  //[CallWith=ScriptState, RaisesException] void get(record<DOMString, any> items,
+  //                                                 optional SodiumStorageAreaGetCallback callback = null);
+  [CallWith=ScriptState, RaisesException] void set(record<DOMString, any> items,
+                                                   optional SodiumStorageAreaCallback callback = null);
+  [CallWith=ScriptState, RaisesException] void remove(DOMString key,
+                                                      optional SodiumStorageAreaCallback callback = null);
+  [CallWith=ScriptState, RaisesException] void remove(sequence<DOMString> keys,
+                                                      optional SodiumStorageAreaCallback callback = null);
+  [CallWith=ScriptState, RaisesException] void clear(optional SodiumStorageAreaCallback callback = null);
+};
diff --git a/third_party/blink/renderer/modules/sodium/sodium_storage_area_callback.idl b/third_party/blink/renderer/modules/sodium/sodium_storage_area_callback.idl
new file mode 100644
index 0000000..8448107
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/sodium_storage_area_callback.idl
@@ -0,0 +1,3 @@
+callback interface SodiumStorageAreaCallback {
+  void Invoke();
+};
diff --git a/third_party/blink/renderer/modules/sodium/sodium_storage_area_get_callback.idl b/third_party/blink/renderer/modules/sodium/sodium_storage_area_get_callback.idl
new file mode 100644
index 0000000..3c3bcb7
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/sodium_storage_area_get_callback.idl
@@ -0,0 +1,3 @@
+callback interface SodiumStorageAreaGetCallback {
+  void Invoke(object items);
+};
diff --git a/third_party/blink/renderer/modules/sodium/sodium_tab.cc b/third_party/blink/renderer/modules/sodium/sodium_tab.cc
new file mode 100644
index 0000000..f6a0668
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/sodium_tab.cc
@@ -0,0 +1,85 @@
+#include "third_party/blink/renderer/modules/sodium/sodium.h"
+
+#include "third_party/blink/public/common/thread_safe_browser_interface_broker_proxy.h"
+#include "third_party/blink/renderer/core/frame/local_frame_client.h"
+
+namespace blink {
+
+SodiumTab::SodiumTab(LocalFrame* frame) : ContextClient(frame) {
+  if (!frame || !frame->Client()) return;
+  LocalFrameClient* client = frame->Client();
+  //LOG(INFO) << "SodiumTab(frame): initialized=" << client->SodiumInitialized();
+  if (client->SodiumInitialized()) return;
+
+  mojo::Remote<mojom::blink::SodiumStorageArea> host;
+  Platform::Current()->GetBrowserInterfaceBroker()->GetInterface(host.BindNewPipeAndPassReceiver());
+  //LOG(INFO) << "SodiumTab(frame): SodiumStorageArea.is_bound=" << host.is_bound();
+  if (!host.is_bound()) return;
+
+  base::ListValue host_keys = base::ListValue();
+  host_keys.AppendString("settings");
+  base::Value host_items;
+  if (!host->get("local", std::move(host_keys), &host_items)) return;
+
+  v8::Isolate* isolate = GetExecutionContext()->GetIsolate();
+  v8::Local<v8::Context> context = isolate->GetCurrentContext();
+  v8::Local<v8::Object> out_items = v8::Object::New(isolate);
+  for (const auto& iter : host_items.DictItems()) {
+    v8::Local<v8::String> out_key = v8::String::NewFromUtf8(isolate, iter.first.data(), v8::NewStringType::kNormal).ToLocalChecked();
+    base::Value::BlobStorage out_blob = iter.second.GetBlob();
+    scoped_refptr<SharedBuffer> out_buffer = SharedBuffer::Create(out_blob.data(), out_blob.size());
+    scoped_refptr<SerializedScriptValue> deserialize_value = SerializedScriptValue::Create(out_buffer);
+    if (!out_items->Set(context, out_key, deserialize_value->Deserialize(isolate)).ToChecked()) return;
+  }
+
+  bool sodium_display_on_player = true;
+  v8::Local<v8::String> settings_key = v8::String::NewFromUtf8(isolate, "settings", v8::NewStringType::kNormal).ToLocalChecked();
+  if (out_items->Has(context, settings_key).ToChecked()) {
+    v8::Local<v8::Value> settings_value = out_items->Get(context, settings_key).ToLocalChecked();
+    //LOG(INFO) << "SodiumTab(frame): settings.IsObject()=" << settings_value->IsObject();
+    if (settings_value->IsObject()) {
+      v8::Local<v8::Object> settings = settings_value->ToObject(context).ToLocalChecked();
+      v8::Local<v8::String> display_on_player_key = v8::String::NewFromUtf8(isolate, "display_on_player", v8::NewStringType::kNormal).ToLocalChecked();
+      //LOG(INFO) << "SodiumTab(frame): settings.has(display_on_player)=" << settings->Has(context, display_on_player_key).ToChecked();
+      if (settings->Has(context, display_on_player_key).ToChecked()) {
+        v8::Local<v8::Value> display_on_player_value = settings->Get(context, display_on_player_key).ToLocalChecked();
+        //LOG(INFO) << "SodiumTab(frame): display_on_player.IsBoolean()=" << display_on_player_value->IsBoolean();
+        if (display_on_player_value->IsBoolean()) {
+          sodium_display_on_player = display_on_player_value->ToBoolean(isolate)->Value();
+          //LOG(INFO) << "SodiumTab(frame): display_on_player=" << sodium_display_on_player;
+        }
+      }
+    }
+  }
+
+  client->SetSodiumDisplayOnPlayer(sodium_display_on_player);
+  client->SetSodiumInitialized(true);
+  //LOG(INFO) << "SodiumTab(frame): set initialized.";
+}
+
+void SodiumTab::Trace(blink::Visitor* visitor) {
+  ScriptWrappable::Trace(visitor);
+  ContextClient::Trace(visitor);
+}
+
+bool SodiumTab::alive() {
+  LocalFrame* frame = GetFrame();
+  return (frame && frame->Client()) ? frame->Client()->SodiumAlive() : false;
+}
+
+void SodiumTab::setAlive(bool sodium_alive) {
+  LocalFrame* frame = GetFrame();
+  if (frame && frame->Client()) frame->Client()->SetSodiumAlive(sodium_alive);
+}
+
+bool SodiumTab::displayOnPlayer() {
+  LocalFrame* frame = GetFrame();
+  return (frame && frame->Client()) ? frame->Client()->SodiumDisplayOnPlayer() : false;
+}
+
+void SodiumTab::setDisplayOnPlayer(bool sodium_display_on_player) {
+  LocalFrame* frame = GetFrame();
+  if (frame && frame->Client()) frame->Client()->SetSodiumDisplayOnPlayer(sodium_display_on_player);
+}
+
+}  // namespace blink
diff --git a/third_party/blink/renderer/modules/sodium/sodium_tab.h b/third_party/blink/renderer/modules/sodium/sodium_tab.h
new file mode 100644
index 0000000..7e96954
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/sodium_tab.h
@@ -0,0 +1,27 @@
+#ifndef THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_SODIUM_TAB_H_
+#define THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_SODIUM_TAB_H_
+
+#include "third_party/blink/renderer/platform/bindings/script_wrappable.h"
+#include "third_party/blink/renderer/core/execution_context/context_lifecycle_observer.h"
+
+namespace blink {
+
+class LocalFrame;
+
+class SodiumTab final : public ScriptWrappable, public ContextClient {
+  DEFINE_WRAPPERTYPEINFO();
+  USING_GARBAGE_COLLECTED_MIXIN(SodiumTab);
+
+ public:
+  explicit SodiumTab(LocalFrame*);
+  void Trace(blink::Visitor*) override;
+
+  bool alive();
+  void setAlive(bool);
+  bool displayOnPlayer();
+  void setDisplayOnPlayer(bool);
+};
+
+}  // namespace blink
+
+#endif  // THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_SODIUM_TAB_H_
diff --git a/third_party/blink/renderer/modules/sodium/sodium_tab.idl b/third_party/blink/renderer/modules/sodium/sodium_tab.idl
new file mode 100644
index 0000000..2221135
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/sodium_tab.idl
@@ -0,0 +1,4 @@
+interface SodiumTab {
+    attribute boolean alive;
+    attribute boolean displayOnPlayer;
+};
diff --git a/third_party/blink/renderer/modules/sodium/window_sodium.cc b/third_party/blink/renderer/modules/sodium/window_sodium.cc
new file mode 100644
index 0000000..d5d7289
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/window_sodium.cc
@@ -0,0 +1,44 @@
+#include "third_party/blink/renderer/modules/sodium/window_sodium.h"
+
+#include "third_party/blink/renderer/core/frame/local_dom_window.h"
+#include "third_party/blink/renderer/core/frame/local_frame_client.h"
+#include "third_party/blink/renderer/modules/sodium/sodium.h"
+#include "url/sodium_whitelist.h"
+
+namespace blink {
+
+WindowSodium::WindowSodium(LocalDOMWindow& window) : Supplement<LocalDOMWindow>(window) {}
+
+void WindowSodium::Trace(blink::Visitor* visitor) {
+  visitor->Trace(sodium_);
+  Supplement<LocalDOMWindow>::Trace(visitor);
+}
+
+const char WindowSodium::kSupplementName[] = "WindowSodium";
+
+WindowSodium& WindowSodium::From(LocalDOMWindow& window) {
+  WindowSodium* supplement = Supplement<LocalDOMWindow>::From<WindowSodium>(window);
+  if (!supplement) {
+    supplement = MakeGarbageCollected<WindowSodium>(window);
+    ProvideTo(window, supplement);
+  }
+  return *supplement;
+}
+
+Sodium* WindowSodium::sodium(LocalDOMWindow& window) {
+  return WindowSodium::From(window).sodium();
+}
+
+Sodium* WindowSodium::sodium() {
+  LocalFrame* frame = GetSupplementable()->GetFrame();
+  if (frame) {
+    GURL url = GURL(frame->GetDocument()->Url());
+    if (!sodium_ && (url::SodiumWhitelist::IsSodiumResultPage(url)
+        || (frame->Client()->IsEnableSodium() && url::SodiumWhitelist::IsAllowSodiumJs(url)))) {
+      sodium_ = MakeGarbageCollected<Sodium>(frame);
+    }
+  }
+  return sodium_.Get();
+}
+
+}  // namespace blink
diff --git a/third_party/blink/renderer/modules/sodium/window_sodium.h b/third_party/blink/renderer/modules/sodium/window_sodium.h
new file mode 100644
index 0000000..6caa18f
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/window_sodium.h
@@ -0,0 +1,32 @@
+#ifndef THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_WINDOW_SODIUM_h_
+#define THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_WINDOW_SODIUM_h_
+
+#include "third_party/blink/renderer/platform/supplementable.h"
+
+namespace blink {
+
+class LocalDOMWindow;
+class Sodium;
+
+class WindowSodium final : public GarbageCollected<WindowSodium>, public Supplement<LocalDOMWindow> {
+  USING_GARBAGE_COLLECTED_MIXIN(WindowSodium);
+
+ public:
+  static const char kSupplementName[];
+
+  explicit WindowSodium(LocalDOMWindow&);
+
+  static WindowSodium& From(LocalDOMWindow&);
+  static Sodium* sodium(LocalDOMWindow&);
+
+  void Trace(blink::Visitor*) override;
+
+ private:
+  Sodium* sodium();
+
+  Member<Sodium> sodium_;
+};
+
+}  // namespace blink
+
+#endif  // THIRD_PARTY_BLINK_RENDERER_MODULES_SODIUM_WINDOW_SODIUM_h_
diff --git a/third_party/blink/renderer/modules/sodium/window_sodium.idl b/third_party/blink/renderer/modules/sodium/window_sodium.idl
new file mode 100644
index 0000000..162c9c2
--- /dev/null
+++ b/third_party/blink/renderer/modules/sodium/window_sodium.idl
@@ -0,0 +1,4 @@
+[ImplementedAs=WindowSodium]
+partial interface Window {
+    readonly attribute Sodium sodium;
+};
