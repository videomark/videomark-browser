# This software patche is licensed under the same license as original code:
### third_party/blink/renderer/core/exported/local_frame_client_impl.cc
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2.1
### third_party/blink/renderer/core/exported/local_frame_client_impl.h
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2.1
### third_party/blink/renderer/core/frame/local_frame_client.h
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2.1
### third_party/blink/renderer/core/loader/empty_clients.h
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2.1

diff --git a/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegate.java b/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegate.java
index 7499b47..780de69 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegate.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegate.java
@@ -22,6 +22,17 @@ import java.util.List;
  */
 interface ExternalNavigationDelegate {
     /**
+     * @param enabled If true, allow sodium.
+     * @param reloadOnChange Reload the page.
+     */
+    public void setEnableSodium(boolean enabled, boolean reloadOnChange);
+
+    /**
+     * @return true, if allow sodium.
+     */
+    public boolean getEnableSodium();
+
+    /**
      * See {@link PackageManagerUtils#queryIntentActivities(Intent, int)}
      */
     @NonNull
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegateImpl.java b/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegateImpl.java
index 7f77013..009dbba 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegateImpl.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegateImpl.java
@@ -616,6 +616,18 @@ public class ExternalNavigationDelegateImpl implements ExternalNavigationDelegat
         return mTab.getWebContents().getLastCommittedUrl();
     }
 
+    @Override
+    public void setEnableSodium(boolean enabled, boolean reloadOnChange) {
+        if (mTab != null) {
+            mTab.setEnableSodium(enabled, reloadOnChange);
+        }
+    }
+
+    @Override
+    public boolean getEnableSodium() {
+        return mTab != null && mTab.getEnableSodium();
+    }
+
     /**
      * Dispatches the intent through a proxy activity, so that startActivityForResult can be used
      * and the intent recipient can verify the caller.
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tab/Tab.java b/chrome/android/java/src/org/chromium/chrome/browser/tab/Tab.java
index a5ced47..1708950 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/tab/Tab.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tab/Tab.java
@@ -120,6 +120,17 @@ public interface Tab extends TabLifecycle {
     boolean isNativePage();
 
     /**
+     * @param enabled If true, allow sodium.
+     * @param reloadOnChange Reload the page.
+     */
+    public void setEnableSodium(boolean enabled, boolean reloadOnChange);
+
+    /**
+     * @return true, if allow sodium.
+     */
+    public boolean getEnableSodium();
+
+    /**
      * Replaces the current NativePage with a empty stand-in for a NativePage. This can be used
      * to reduce memory pressure.
      */
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabImpl.java b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabImpl.java
index 23f8197..b88d918 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/tab/TabImpl.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tab/TabImpl.java
@@ -34,6 +34,8 @@ import org.chromium.chrome.browser.native_page.NativePageAssassin;
 import org.chromium.chrome.browser.native_page.NativePageFactory;
 import org.chromium.chrome.browser.night_mode.NightModeUtils;
 import org.chromium.chrome.browser.offlinepages.OfflinePageUtils;
+import org.chromium.chrome.browser.preferences.Pref;
+import org.chromium.chrome.browser.preferences.PrefServiceBridge;
 import org.chromium.chrome.browser.prerender.ExternalPrerenderHandler;
 import org.chromium.chrome.browser.profiles.Profile;
 import org.chromium.chrome.browser.rlz.RevenueStats;
@@ -385,6 +387,19 @@ public class TabImpl implements Tab {
     }
 
     @Override
+    public void setEnableSodium(boolean enabled, boolean reloadOnChange) {
+        if (getWebContents() != null) {
+            getWebContents().getNavigationController().setEnableSodium(enabled, reloadOnChange);
+        }
+        PrefServiceBridge.getInstance().setBoolean(Pref.ENABLE_SODIUM, enabled);
+    }
+
+    @Override
+    public boolean getEnableSodium() {
+        return getWebContents() != null && getWebContents().getNavigationController().getEnableSodium();
+    }
+
+    @Override
     public void freezeNativePage() {
         if (mNativePage == null || mNativePage.isFrozen()
                 || mNativePage.getView().getParent() == null) {
diff --git a/chrome/browser/android/preferences/prefs.h b/chrome/browser/android/preferences/prefs.h
index 1d938c6..39b0508 100644
--- a/chrome/browser/android/preferences/prefs.h
+++ b/chrome/browser/android/preferences/prefs.h
@@ -60,6 +60,7 @@ enum Pref {
   BLOCK_THIRD_PARTY_COOKIES,
   COOKIE_CONTROLS_MODE,
   ENABLE_DO_NOT_TRACK,
+  ENABLE_SODIUM,
   PRINTING_ENABLED,
   OFFER_TRANSLATE_ENABLED,
   NOTIFICATIONS_VIBRATE_ENABLED,
@@ -113,6 +114,7 @@ const char* const kPrefsExposedToJava[] = {
     prefs::kBlockThirdPartyCookies,
     prefs::kCookieControlsMode,
     prefs::kEnableDoNotTrack,
+    prefs::kEnableSodium,
     prefs::kPrintingEnabled,
     prefs::kOfferTranslateEnabled,
     prefs::kNotificationsVibrateEnabled,
diff --git a/chrome/browser/renderer_preferences_util.cc b/chrome/browser/renderer_preferences_util.cc
index f7ce4ce..e6420df 100644
--- a/chrome/browser/renderer_preferences_util.cc
+++ b/chrome/browser/renderer_preferences_util.cc
@@ -13,6 +13,7 @@
 #include "chrome/browser/browser_process.h"
 #include "chrome/browser/profiles/profile.h"
 #include "chrome/common/pref_names.h"
+#include "components/content_settings/core/common/pref_names.h"
 #include "components/language/core/browser/pref_names.h"
 #include "components/prefs/pref_service.h"
 #include "content/public/browser/renderer_preferences_util.h"
@@ -101,6 +102,7 @@ void UpdateFromSystemSettings(blink::mojom::RendererPreferences* prefs,
       pref_service->GetBoolean(prefs::kEnableDoNotTrack);
   prefs->enable_encrypted_media =
       pref_service->GetBoolean(prefs::kEnableEncryptedMedia);
+  prefs->enable_sodium = pref_service->GetBoolean(prefs::kEnableSodium);
   prefs->webrtc_ip_handling_policy = std::string();
   // Handling the backward compatibility of previous boolean verions of policy
   // controls.
diff --git a/chrome/browser/ui/browser_ui_prefs.cc b/chrome/browser/ui/browser_ui_prefs.cc
index a8070d7..279165b 100644
--- a/chrome/browser/ui/browser_ui_prefs.cc
+++ b/chrome/browser/ui/browser_ui_prefs.cc
@@ -13,6 +13,7 @@
 #include "chrome/browser/upgrade_detector/upgrade_detector.h"
 #include "chrome/common/buildflags.h"
 #include "chrome/common/pref_names.h"
+#include "components/content_settings/core/common/pref_names.h"
 #include "components/pref_registry/pref_registry_syncable.h"
 #include "components/prefs/pref_registry_simple.h"
 #include "components/prefs/pref_service.h"
@@ -78,6 +79,7 @@ void RegisterBrowserUserPrefs(user_prefs::PrefRegistrySyncable* registry) {
   registry->RegisterBooleanPref(
       prefs::kEnableDoNotTrack, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
+  registry->RegisterBooleanPref(prefs::kEnableSodium, true);
 #if !defined(OS_CHROMEOS) && !defined(OS_ANDROID)
   registry->RegisterBooleanPref(prefs::kPrintPreviewUseSystemDefaultPrinter,
                                 false);
diff --git a/chrome/browser/ui/prefs/pref_watcher.cc b/chrome/browser/ui/prefs/pref_watcher.cc
index 56bd852..e6c8cdb 100644
--- a/chrome/browser/ui/prefs/pref_watcher.cc
+++ b/chrome/browser/ui/prefs/pref_watcher.cc
@@ -14,6 +14,7 @@
 #include "chrome/browser/ui/prefs/prefs_tab_helper.h"
 #include "chrome/common/pref_names.h"
 #include "components/keyed_service/content/browser_context_dependency_manager.h"
+#include "components/content_settings/core/common/pref_names.h"
 #include "components/language/core/browser/pref_names.h"
 #include "third_party/blink/public/mojom/renderer_preferences.mojom.h"
 
@@ -74,6 +75,8 @@ PrefWatcher::PrefWatcher(Profile* profile) : profile_(profile) {
                                      renderer_callback);
   profile_pref_change_registrar_.Add(prefs::kEnableEncryptedMedia,
                                      renderer_callback);
+  profile_pref_change_registrar_.Add(prefs::kEnableSodium,
+                                     renderer_callback);
   profile_pref_change_registrar_.Add(prefs::kWebRTCMultipleRoutesEnabled,
                                      renderer_callback);
   profile_pref_change_registrar_.Add(prefs::kWebRTCNonProxiedUdpEnabled,
diff --git a/components/content_settings/core/common/pref_names.cc b/components/content_settings/core/common/pref_names.cc
index 59280df..f8f23bd 100644
--- a/components/content_settings/core/common/pref_names.cc
+++ b/components/content_settings/core/common/pref_names.cc
@@ -6,6 +6,8 @@
 
 namespace prefs {
 
+const char kEnableSodium[] = "enable_sodium";
+
 // Boolean that is true if we should unconditionally block third-party cookies,
 // regardless of other content settings.
 const char kBlockThirdPartyCookies[] = "profile.block_third_party_cookies";
diff --git a/components/content_settings/core/common/pref_names.h b/components/content_settings/core/common/pref_names.h
index a4c4bff..29b548f 100644
--- a/components/content_settings/core/common/pref_names.h
+++ b/components/content_settings/core/common/pref_names.h
@@ -13,6 +13,8 @@ namespace prefs {
 // some of these are generated by WebsiteSettingsInfo from content settings
 // names.
 
+extern const char kEnableSodium[];
+
 // TODO(crbug.com/967668): Remove direct access to these preferences and
 // replace with CookieSettings::ShouldBlockThirdPartyCookies().
 extern const char kBlockThirdPartyCookies[];
diff --git a/content/browser/frame_host/navigation_controller_android.cc b/content/browser/frame_host/navigation_controller_android.cc
index 5bd698f..d46e8fb 100644
--- a/content/browser/frame_host/navigation_controller_android.cc
+++ b/content/browser/frame_host/navigation_controller_android.cc
@@ -375,6 +375,31 @@ void NavigationControllerAndroid::SetUseDesktopUserAgent(
   }
 }
 
+bool NavigationControllerAndroid::GetEnableSodium(
+    JNIEnv* env,
+    const JavaParamRef<jobject>& obj) {
+  return navigation_controller_->GetEnableSodium();
+}
+
+void NavigationControllerAndroid::SetEnableSodium(
+    JNIEnv* env,
+    const JavaParamRef<jobject>& obj,
+    jboolean enabled,
+    jboolean reload_on_state_change) {
+  if (GetEnableSodium(env, obj) == enabled)
+    return;
+
+  navigation_controller_->SetEnableSodium(enabled);
+  navigation_controller_->SyncRendererPrefs();
+
+  // Send the override to the renderer.
+  if (reload_on_state_change) {
+    // Reloading the page will send the override down as part of the
+    // navigation IPC message.
+    navigation_controller_->Reload(ReloadType::ORIGINAL_REQUEST_URL, true);
+  }
+}
+
 base::android::ScopedJavaLocalRef<jobject>
 NavigationControllerAndroid::GetEntryAtIndex(JNIEnv* env,
                                              const JavaParamRef<jobject>& obj,
diff --git a/content/browser/frame_host/navigation_controller_android.h b/content/browser/frame_host/navigation_controller_android.h
index 261353c..e1cb8a2 100644
--- a/content/browser/frame_host/navigation_controller_android.h
+++ b/content/browser/frame_host/navigation_controller_android.h
@@ -92,6 +92,14 @@ class CONTENT_EXPORT NavigationControllerAndroid {
       const base::android::JavaParamRef<jobject>& /* obj */,
       jboolean state,
       jboolean reload_on_state_change);
+  bool GetEnableSodium(
+      JNIEnv* env,
+      const base::android::JavaParamRef<jobject>& /* obj */);
+  void SetEnableSodium(
+      JNIEnv* env,
+      const base::android::JavaParamRef<jobject>& /* obj */,
+      jboolean enabled,
+      jboolean reload_on_state_change);
   base::android::ScopedJavaLocalRef<jobject> GetEntryAtIndex(
       JNIEnv* env,
       const base::android::JavaParamRef<jobject>& obj,
diff --git a/content/browser/frame_host/navigation_controller_impl.cc b/content/browser/frame_host/navigation_controller_impl.cc
index 1bb7007..8cb42ff 100644
--- a/content/browser/frame_host/navigation_controller_impl.cc
+++ b/content/browser/frame_host/navigation_controller_impl.cc
@@ -74,6 +74,7 @@
 #include "content/public/browser/render_widget_host_view.h"
 #include "content/public/browser/replaced_navigation_entry_data.h"
 #include "content/public/browser/storage_partition.h"
+#include "content/public/browser/web_contents.h"
 #include "content/public/common/content_client.h"
 #include "content/public/common/content_constants.h"
 #include "content/public/common/content_features.h"
@@ -3645,4 +3646,19 @@ void NavigationControllerImpl::PendingEntryRefDeleted(PendingEntryRef* ref) {
   delegate_->NotifyNavigationStateChanged(INVALIDATE_TYPE_URL);
 }
 
+bool NavigationControllerImpl::GetEnableSodium() {
+  blink::mojom::RendererPreferences* render_prefs = GetWebContents()->GetMutableRendererPrefs();
+  return render_prefs->enable_sodium;
+}
+
+void NavigationControllerImpl::SetEnableSodium(bool enabled) {
+  blink::mojom::RendererPreferences* render_prefs = GetWebContents()->GetMutableRendererPrefs();
+  render_prefs->enable_sodium = enabled;
+}
+
+void NavigationControllerImpl::SyncRendererPrefs() {
+  GetWebContents()->SyncRendererPrefs();
+  delegate_->UpdateOverridingUserAgent();
+}
+
 }  // namespace content
diff --git a/content/browser/frame_host/navigation_controller_impl.h b/content/browser/frame_host/navigation_controller_impl.h
index 00ab09d..8e69962 100644
--- a/content/browser/frame_host/navigation_controller_impl.h
+++ b/content/browser/frame_host/navigation_controller_impl.h
@@ -318,6 +318,10 @@ class CONTENT_EXPORT NavigationControllerImpl : public NavigationController {
       BrowserContext* browser_context,
       scoped_refptr<network::SharedURLLoaderFactory> blob_url_loader_factory);
 
+  bool GetEnableSodium();
+  void SetEnableSodium(bool enabled);
+  void SyncRendererPrefs();
+
  private:
   friend class RestoreHelper;
 
diff --git a/content/browser/frame_host/render_frame_host_impl.cc b/content/browser/frame_host/render_frame_host_impl.cc
index e55e2d9..d096023c 100644
--- a/content/browser/frame_host/render_frame_host_impl.cc
+++ b/content/browser/frame_host/render_frame_host_impl.cc
@@ -4462,6 +4462,21 @@ void RenderFrameHostImpl::TransferUserActivationFrom(
   }
 }
 
+void RenderFrameHostImpl::SetSodiumInitialized(bool sodium_initialized) {
+  WebContents* web_contents = AccessibilityWebContents();
+  if (web_contents) web_contents->GetMutableRendererPrefs()->sodium_initialized = sodium_initialized;
+}
+
+void RenderFrameHostImpl::SetSodiumAlive(bool sodium_alive) {
+  WebContents* web_contents = AccessibilityWebContents();
+  if (web_contents) web_contents->GetMutableRendererPrefs()->sodium_alive = sodium_alive;
+}
+
+void RenderFrameHostImpl::SetSodiumDisplayOnPlayer(bool sodium_display_on_player) {
+  WebContents* web_contents = AccessibilityWebContents();
+  if (web_contents) web_contents->GetMutableRendererPrefs()->sodium_display_on_player = sodium_display_on_player;
+}
+
 void RenderFrameHostImpl::CreateNewWindow(
     mojom::CreateNewWindowParamsPtr params,
     CreateNewWindowCallback callback) {
diff --git a/content/browser/frame_host/render_frame_host_impl.h b/content/browser/frame_host/render_frame_host_impl.h
index 0769246..ceee319 100644
--- a/content/browser/frame_host/render_frame_host_impl.h
+++ b/content/browser/frame_host/render_frame_host_impl.h
@@ -1563,6 +1563,10 @@ class CONTENT_EXPORT RenderFrameHostImpl
   void OnRequestOverlayRoutingToken();
 
   // mojom::FrameHost:
+  void SetSodiumInitialized(bool sodium_initialized) override;
+  void SetSodiumAlive(bool sodium_alive) override;
+  void SetSodiumDisplayOnPlayer(bool sodium_display_on_player) override;
+
   void CreateNewWindow(mojom::CreateNewWindowParamsPtr params,
                        CreateNewWindowCallback callback) override;
   void CreatePortal(
diff --git a/content/common/frame.mojom b/content/common/frame.mojom
index bea0e96..ee37132 100644
--- a/content/common/frame.mojom
+++ b/content/common/frame.mojom
@@ -353,6 +353,10 @@ interface KeepAliveHandle {};
 // Implemented by the frame server (i.e. the browser process). For messages that
 // must be associated with the IPC channel.
 interface FrameHost {
+  SetSodiumInitialized(bool sodium_initialized);
+  SetSodiumAlive(bool sodium_alive);
+  SetSodiumDisplayOnPlayer(bool sodium_display_on_player);
+
   // Sent by the renderer to request the browser to create a new window. |reply|
   // is only non-null on when status == CreateNewWindowStatus::kSuccess.
   [Sync] CreateNewWindow(CreateNewWindowParams params)
diff --git a/content/public/android/java/src/org/chromium/content/browser/framehost/NavigationControllerImpl.java b/content/public/android/java/src/org/chromium/content/browser/framehost/NavigationControllerImpl.java
index 62a4bdc..b085edf 100644
--- a/content/public/android/java/src/org/chromium/content/browser/framehost/NavigationControllerImpl.java
+++ b/content/public/android/java/src/org/chromium/content/browser/framehost/NavigationControllerImpl.java
@@ -225,6 +225,19 @@ import org.chromium.content_public.common.ResourceRequestBody;
     }
 
     @Override
+    public boolean getEnableSodium() {
+        if (mNativeNavigationControllerAndroid == 0) return false;
+        return NavigationControllerImplJni.get().getEnableSodium(mNativeNavigationControllerAndroid, NavigationControllerImpl.this);
+    }
+
+    @Override
+    public void setEnableSodium(boolean enabled, boolean reloadOnChange) {
+        if (mNativeNavigationControllerAndroid != 0) {
+            NavigationControllerImplJni.get().setEnableSodium(mNativeNavigationControllerAndroid, NavigationControllerImpl.this, enabled, reloadOnChange);
+        }
+    }
+
+    @Override
     public NavigationEntry getEntryAtIndex(int index) {
         if (mNativeNavigationControllerAndroid != 0) {
             return NavigationControllerImplJni.get().getEntryAtIndex(
@@ -360,6 +373,9 @@ import org.chromium.content_public.common.ResourceRequestBody;
                 long nativeNavigationControllerAndroid, NavigationControllerImpl caller);
         void setUseDesktopUserAgent(long nativeNavigationControllerAndroid,
                 NavigationControllerImpl caller, boolean override, boolean reloadOnChange);
+        boolean getEnableSodium(long nativeNavigationControllerAndroid, NavigationControllerImpl caller);
+        void setEnableSodium(long nativeNavigationControllerAndroid, NavigationControllerImpl caller,
+                boolean enabled, boolean reloadOnChange);
         NavigationEntry getEntryAtIndex(
                 long nativeNavigationControllerAndroid, NavigationControllerImpl caller, int index);
         NavigationEntry getVisibleEntry(
diff --git a/content/public/android/java/src/org/chromium/content_public/browser/NavigationController.java b/content/public/android/java/src/org/chromium/content_public/browser/NavigationController.java
index 63456a3..207f8de 100644
--- a/content/public/android/java/src/org/chromium/content_public/browser/NavigationController.java
+++ b/content/public/android/java/src/org/chromium/content_public/browser/NavigationController.java
@@ -140,6 +140,17 @@ public interface NavigationController {
     public void setUseDesktopUserAgent(boolean override, boolean reloadOnChange);
 
     /**
+     * @return true, if allow sodium.
+     */
+    public boolean getEnableSodium();
+
+    /**
+     * @param enabled If true, allow sodium.
+     * @param reloadOnChange Reload the page.
+     */
+    public void setEnableSodium(boolean enabled, boolean reloadOnChange);
+
+    /**
      * Return the NavigationEntry at the given index.
      * @param index Index to retrieve the NavigationEntry for.
      * @return Entry containing info about the navigation, null if the index is out of bounds.
diff --git a/content/public/common/common_param_traits_macros.h b/content/public/common/common_param_traits_macros.h
index fe4ca0f..d959eae 100644
--- a/content/public/common/common_param_traits_macros.h
+++ b/content/public/common/common_param_traits_macros.h
@@ -319,6 +319,10 @@ IPC_STRUCT_TRAITS_BEGIN(blink::mojom::RendererPreferences)
   IPC_STRUCT_TRAITS_MEMBER(enable_referrers)
   IPC_STRUCT_TRAITS_MEMBER(enable_do_not_track)
   IPC_STRUCT_TRAITS_MEMBER(enable_encrypted_media)
+  IPC_STRUCT_TRAITS_MEMBER(enable_sodium)
+  IPC_STRUCT_TRAITS_MEMBER(sodium_initialized)
+  IPC_STRUCT_TRAITS_MEMBER(sodium_alive)
+  IPC_STRUCT_TRAITS_MEMBER(sodium_display_on_player)
   IPC_STRUCT_TRAITS_MEMBER(webrtc_ip_handling_policy)
   IPC_STRUCT_TRAITS_MEMBER(webrtc_udp_min_port)
   IPC_STRUCT_TRAITS_MEMBER(webrtc_udp_max_port)
diff --git a/content/public/renderer/render_frame.h b/content/public/renderer/render_frame.h
index e7870c4..b65d856 100644
--- a/content/public/renderer/render_frame.h
+++ b/content/public/renderer/render_frame.h
@@ -35,6 +35,7 @@ class WebElement;
 class WebFrame;
 class WebLocalFrame;
 class WebPlugin;
+class WebString;
 struct WebPluginParams;
 struct WebRect;
 }
@@ -326,6 +327,10 @@ class CONTENT_EXPORT RenderFrame : public IPC::Listener,
   // Returns the device scale factor of the display the render frame is in.
   virtual float GetDeviceScaleFactor() = 0;
 
+  virtual bool IsEnableSodium() = 0;
+
+  virtual blink::WebString SodiumUserAgent() = 0;
+
  protected:
   ~RenderFrame() override {}
 
diff --git a/content/renderer/render_frame_impl.cc b/content/renderer/render_frame_impl.cc
index 3f3f5da..0e28b229 100644
--- a/content/renderer/render_frame_impl.cc
+++ b/content/renderer/render_frame_impl.cc
@@ -47,6 +47,7 @@
 #include "base/trace_event/trace_event.h"
 #include "build/build_config.h"
 #include "cc/base/switches.h"
+#include "components/version_info/version_info.h"
 #include "content/common/accessibility_messages.h"
 #include "content/common/associated_interfaces.mojom.h"
 #include "content/common/content_constants_internal.h"
@@ -79,6 +80,7 @@
 #include "content/public/common/service_manager_connection.h"
 #include "content/public/common/url_constants.h"
 #include "content/public/common/url_utils.h"
+#include "content/public/common/user_agent.h"
 #include "content/public/renderer/browser_plugin_delegate.h"
 #include "content/public/renderer/content_renderer_client.h"
 #include "content/public/renderer/context_menu_client.h"
@@ -6950,4 +6952,43 @@ float RenderFrameImpl::GetDeviceScaleFactor() {
   return GetLocalRootRenderWidget()->GetScreenInfo().device_scale_factor;
 }
 
+bool RenderFrameImpl::IsEnableSodium() {
+  return render_view_->renderer_preferences_.enable_sodium;
+}
+
+bool RenderFrameImpl::SodiumInitialized() {
+  return render_view_->renderer_preferences_.sodium_initialized;
+}
+
+void RenderFrameImpl::SetSodiumInitialized(bool sodium_initialized) {
+  render_view_->renderer_preferences_.sodium_initialized = sodium_initialized;
+  GetFrameHost()->SetSodiumInitialized(sodium_initialized);
+}
+
+bool RenderFrameImpl::SodiumAlive() {
+  return render_view_->renderer_preferences_.sodium_alive;
+}
+
+void RenderFrameImpl::SetSodiumAlive(bool sodium_alive) {
+  render_view_->renderer_preferences_.sodium_alive = sodium_alive;
+  GetFrameHost()->SetSodiumAlive(sodium_alive);
+}
+
+bool RenderFrameImpl::SodiumDisplayOnPlayer() {
+  return render_view_->renderer_preferences_.sodium_display_on_player;
+}
+
+void RenderFrameImpl::SetSodiumDisplayOnPlayer(bool sodium_display_on_player) {
+  render_view_->renderer_preferences_.sodium_display_on_player = sodium_display_on_player;
+  GetFrameHost()->SetSodiumDisplayOnPlayer(sodium_display_on_player);
+}
+
+blink::WebString RenderFrameImpl::SodiumUserAgent() {
+  std::string product = version_info::GetProductNameAndVersionForUserAgent();
+#if defined(OS_ANDROID)
+  product += " Mobile";
+#endif
+  return WebString::FromUTF8(content::BuildUserAgentFromProduct(product));
+}
+
 }  // namespace content
diff --git a/content/renderer/render_frame_impl.h b/content/renderer/render_frame_impl.h
index 2e25541..7ffacf3 100644
--- a/content/renderer/render_frame_impl.h
+++ b/content/renderer/render_frame_impl.h
@@ -916,6 +916,22 @@ class CONTENT_EXPORT RenderFrameImpl
   void SetWebURLLoaderFactoryOverrideForTest(
       std::unique_ptr<blink::WebURLLoaderFactoryForTest> factory);
 
+  bool IsEnableSodium() override;
+
+  bool SodiumInitialized() override;
+
+  void SetSodiumInitialized(bool sodium_initialized) override;
+
+  bool SodiumAlive() override;
+
+  void SetSodiumAlive(bool sodium_alive) override;
+
+  bool SodiumDisplayOnPlayer() override;
+
+  void SetSodiumDisplayOnPlayer(bool sodium_display_on_player) override;
+
+  blink::WebString SodiumUserAgent() override;
+
  protected:
   explicit RenderFrameImpl(CreateParams params);
 
diff --git a/third_party/blink/public/mojom/renderer_preferences.mojom b/third_party/blink/public/mojom/renderer_preferences.mojom
index ec41e11..0ec0edc 100644
--- a/third_party/blink/public/mojom/renderer_preferences.mojom
+++ b/third_party/blink/public/mojom/renderer_preferences.mojom
@@ -77,6 +77,12 @@ struct RendererPreferences {
   // spec.
   bool enable_encrypted_media = true;
 
+  // Set to true to enable sodium.
+  bool enable_sodium = false;
+  bool sodium_initialized = false;
+  bool sodium_alive = false;
+  bool sodium_display_on_player = false;
+
   // This is the IP handling policy override for WebRTC. The value must be one
   // of the strings defined in privacy.json. The allowed values are specified
   // in webrtc_ip_handling_policy.h.
diff --git a/third_party/blink/public/web/web_local_frame_client.h b/third_party/blink/public/web/web_local_frame_client.h
index dd2e80e..58fd1b0 100644
--- a/third_party/blink/public/web/web_local_frame_client.h
+++ b/third_party/blink/public/web/web_local_frame_client.h
@@ -624,6 +624,16 @@ class BLINK_EXPORT WebLocalFrameClient {
   // header. An empty string indicates that no DNT header will be send.
   virtual WebString DoNotTrackValue() { return WebString(); }
 
+  // Sodium ----------------------------------------------------
+  virtual bool IsEnableSodium() { return false; }
+  virtual bool SodiumInitialized() { return true; }
+  virtual void SetSodiumInitialized(bool sodium_initialized) {}
+  virtual bool SodiumAlive() { return false; }
+  virtual void SetSodiumAlive(bool sodium_alive) {}
+  virtual bool SodiumDisplayOnPlayer() { return false; }
+  virtual void SetSodiumDisplayOnPlayer(bool sodium_display_on_player) {}
+  virtual WebString SodiumUserAgent() { return WebString(); }
+
   // WebGL ------------------------------------------------------
 
   // Asks the embedder whether WebGL is blocked for the WebFrame. This call is
diff --git a/third_party/blink/renderer/core/exported/local_frame_client_impl.cc b/third_party/blink/renderer/core/exported/local_frame_client_impl.cc
index 1122eaf..7e063ca 100644
--- a/third_party/blink/renderer/core/exported/local_frame_client_impl.cc
+++ b/third_party/blink/renderer/core/exported/local_frame_client_impl.cc
@@ -768,6 +768,38 @@ String LocalFrameClientImpl::DoNotTrackValue() {
   return String();
 }
 
+bool LocalFrameClientImpl::IsEnableSodium() {
+  return web_frame_->Client()->IsEnableSodium();
+}
+
+bool LocalFrameClientImpl::SodiumInitialized() {
+  return web_frame_->Client()->SodiumInitialized();
+}
+
+void LocalFrameClientImpl::SetSodiumInitialized(bool sodium_initialized) {
+  web_frame_->Client()->SetSodiumInitialized(sodium_initialized);
+}
+
+bool LocalFrameClientImpl::SodiumAlive() {
+  return web_frame_->Client()->SodiumAlive();
+}
+
+void LocalFrameClientImpl::SetSodiumAlive(bool sodium_alive) {
+  web_frame_->Client()->SetSodiumAlive(sodium_alive);
+}
+
+bool LocalFrameClientImpl::SodiumDisplayOnPlayer() {
+  return web_frame_->Client()->SodiumDisplayOnPlayer();
+}
+
+void LocalFrameClientImpl::SetSodiumDisplayOnPlayer(bool sodium_display_on_player) {
+  web_frame_->Client()->SetSodiumDisplayOnPlayer(sodium_display_on_player);
+}
+
+String LocalFrameClientImpl::SodiumUserAgent() {
+  return web_frame_->Client()->SodiumUserAgent();
+}
+
 // Called when the FrameLoader goes into a state in which a new page load
 // will occur.
 void LocalFrameClientImpl::TransitionToCommittedForNewPage() {
diff --git a/third_party/blink/renderer/core/exported/local_frame_client_impl.h b/third_party/blink/renderer/core/exported/local_frame_client_impl.h
index 79340cb..df042b5 100644
--- a/third_party/blink/renderer/core/exported/local_frame_client_impl.h
+++ b/third_party/blink/renderer/core/exported/local_frame_client_impl.h
@@ -172,6 +172,14 @@ class LocalFrameClientImpl final : public LocalFrameClient {
   WTF::String UserAgent() override;
   blink::UserAgentMetadata UserAgentMetadata() override;
   WTF::String DoNotTrackValue() override;
+  bool IsEnableSodium() override;
+  bool SodiumInitialized() override;
+  void SetSodiumInitialized(bool sodium_initialized) override;
+  bool SodiumAlive() override;
+  void SetSodiumAlive(bool sodium_alive) override;
+  bool SodiumDisplayOnPlayer() override;
+  void SetSodiumDisplayOnPlayer(bool sodium_display_on_player) override;
+  WTF::String SodiumUserAgent() override;
   void TransitionToCommittedForNewPage() override;
   LocalFrame* CreateFrame(const WTF::AtomicString& name,
                           HTMLFrameOwnerElement*) override;
diff --git a/third_party/blink/renderer/core/frame/local_frame_client.h b/third_party/blink/renderer/core/frame/local_frame_client.h
index 985c6b2..0ecbedb 100644
--- a/third_party/blink/renderer/core/frame/local_frame_client.h
+++ b/third_party/blink/renderer/core/frame/local_frame_client.h
@@ -244,6 +244,22 @@ class CORE_EXPORT LocalFrameClient : public FrameClient {
 
   virtual String DoNotTrackValue() = 0;
 
+  virtual bool IsEnableSodium() = 0;
+
+  virtual bool SodiumInitialized() = 0;
+
+  virtual void SetSodiumInitialized(bool sodium_initialized) = 0;
+
+  virtual bool SodiumAlive() = 0;
+
+  virtual void SetSodiumAlive(bool sodium_alive) = 0;
+
+  virtual bool SodiumDisplayOnPlayer() = 0;
+
+  virtual void SetSodiumDisplayOnPlayer(bool sodium_display_on_player) = 0;
+
+  virtual String SodiumUserAgent() = 0;
+
   virtual void TransitionToCommittedForNewPage() = 0;
 
   virtual LocalFrame* CreateFrame(const AtomicString& name,
diff --git a/third_party/blink/renderer/core/loader/empty_clients.h b/third_party/blink/renderer/core/loader/empty_clients.h
index a185ee9..e3a772f 100644
--- a/third_party/blink/renderer/core/loader/empty_clients.h
+++ b/third_party/blink/renderer/core/loader/empty_clients.h
@@ -328,6 +328,22 @@ class CORE_EXPORT EmptyLocalFrameClient : public LocalFrameClient {
 
   String DoNotTrackValue() override { return String(); }
 
+  bool IsEnableSodium() override { return false; }
+
+  bool SodiumInitialized() override { return true; }
+
+  void SetSodiumInitialized(bool sodium_initialized) override {}
+
+  bool SodiumAlive() override { return false; }
+
+  void SetSodiumAlive(bool sodium_alive) override {}
+
+  bool SodiumDisplayOnPlayer() override { return false; }
+
+  void SetSodiumDisplayOnPlayer(bool sodium_display_on_player) override {}
+
+  String SodiumUserAgent() override { return ""; }
+
   void TransitionToCommittedForNewPage() override {}
 
   bool NavigateBackForward(int offset) const override { return false; }
