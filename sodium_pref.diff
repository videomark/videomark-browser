# This software patche is licensed under the same license as original code:
### third_party/blink/renderer/core/exported/local_frame_client_impl.cc
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2.1
### third_party/blink/renderer/core/exported/local_frame_client_impl.h
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2.1
### third_party/blink/renderer/core/frame/local_frame_client.h
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2.1
### third_party/blink/renderer/core/loader/empty_clients.h
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2
* https://chromium.googlesource.com/chromium/src/+/master/third_party/blink/renderer/core/LICENSE-LGPL-2.1

diff --git a/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegate.java b/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegate.java
index 1a7cda5..8279d88 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegate.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegate.java
@@ -19,6 +19,17 @@ import java.util.List;
  */
 interface ExternalNavigationDelegate {
     /**
+     * @param enabled If true, allow sodium.
+     * @param reloadOnChange Reload the page.
+     */
+    public void setEnableSodium(boolean enabled, boolean reloadOnChange);
+
+    /**
+     * @return true, if allow sodium.
+     */
+    public boolean getEnableSodium();
+
+    /**
      * Get the list of component name of activities which can resolve |intent|.  If the request
      * fails, null will be returned.
      */
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegateImpl.java b/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegateImpl.java
index d120ae1..1393ec8 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegateImpl.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/externalnav/ExternalNavigationDelegateImpl.java
@@ -668,6 +668,18 @@ public class ExternalNavigationDelegateImpl implements ExternalNavigationDelegat
         return mTab.getWebContents().getLastCommittedUrl();
     }
 
+    @Override
+    public void setEnableSodium(boolean enabled, boolean reloadOnChange) {
+        if (mTab != null) {
+            mTab.setEnableSodium(enabled, reloadOnChange);
+        }
+    }
+
+    @Override
+    public boolean getEnableSodium() {
+        return mTab != null && mTab.getEnableSodium();
+    }
+
     /**
      * Dispatches the intent through a proxy activity, so that startActivityForResult can be used
      * and the intent recipient can verify the caller.
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/preferences/PrefServiceBridge.java b/chrome/android/java/src/org/chromium/chrome/browser/preferences/PrefServiceBridge.java
index a36c2ae..3a28fc4 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/preferences/PrefServiceBridge.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/preferences/PrefServiceBridge.java
@@ -311,6 +311,13 @@ public class PrefServiceBridge {
         return nativeGetDoNotTrackEnabled();
     }
 
+    /**
+     * @return Whether Sodium is enabled
+     */
+    public boolean isSodiumEnabled() {
+        return nativeGetSodiumEnabled();
+    }
+
     public boolean getPasswordEchoEnabled() {
         return nativeGetPasswordEchoEnabled();
     }
@@ -631,6 +638,10 @@ public class PrefServiceBridge {
         nativeSetDoNotTrackEnabled(enabled);
     }
 
+    public void setSodiumEnabled(boolean enabled) {
+        nativeSetSodiumEnabled(enabled);
+    }
+
     public void setRememberPasswordsEnabled(boolean allow) {
         nativeSetRememberPasswordsEnabled(allow);
     }
@@ -1084,6 +1095,7 @@ public class PrefServiceBridge {
     private native boolean nativeGetLocationAllowedByPolicy();
     private native boolean nativeGetAllowLocationManagedByCustodian();
     private native boolean nativeGetDoNotTrackEnabled();
+    private native boolean nativeGetSodiumEnabled();
     private native boolean nativeGetPasswordEchoEnabled();
     private native boolean nativeGetFirstRunEulaAccepted();
     private native boolean nativeGetCameraEnabled();
@@ -1124,6 +1136,7 @@ public class PrefServiceBridge {
     private native void nativeSetBlockThirdPartyCookiesEnabled(boolean enabled);
     private native void nativeSetClipboardEnabled(boolean enabled);
     private native void nativeSetDoNotTrackEnabled(boolean enabled);
+    private native void nativeSetSodiumEnabled(boolean enabled);
     private native void nativeSetRememberPasswordsEnabled(boolean allow);
     private native void nativeSetPasswordManagerAutoSigninEnabled(boolean enabled);
     private native boolean nativeGetAllowLocationEnabled();
diff --git a/chrome/android/java/src/org/chromium/chrome/browser/tab/Tab.java b/chrome/android/java/src/org/chromium/chrome/browser/tab/Tab.java
index 26b8598..c0b33bd 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/tab/Tab.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/tab/Tab.java
@@ -47,6 +47,7 @@ import org.chromium.chrome.browser.native_page.NativePageAssassin;
 import org.chromium.chrome.browser.native_page.NativePageFactory;
 import org.chromium.chrome.browser.night_mode.NightModeUtils;
 import org.chromium.chrome.browser.offlinepages.OfflinePageUtils;
+import org.chromium.chrome.browser.preferences.PrefServiceBridge;
 import org.chromium.chrome.browser.prerender.ExternalPrerenderHandler;
 import org.chromium.chrome.browser.previews.PreviewsAndroidBridge;
 import org.chromium.chrome.browser.profiles.Profile;
@@ -689,6 +690,24 @@ public class Tab
     }
 
     /**
+     * @param enabled If true, allow sodium.
+     * @param reloadOnChange Reload the page.
+     */
+    public void setEnableSodium(boolean enabled, boolean reloadOnChange) {
+        if (getWebContents() != null) {
+            getWebContents().getNavigationController().setEnableSodium(enabled, reloadOnChange);
+        }
+        PrefServiceBridge.getInstance().setSodiumEnabled(enabled);
+    }
+
+    /**
+     * @return true, if allow sodium.
+     */
+    public boolean getEnableSodium() {
+        return getWebContents() != null && getWebContents().getNavigationController().getEnableSodium();
+    }
+
+    /**
      * @return The current {@link ConnectionSecurityLevel} for the tab.
      */
     // TODO(tedchoc): Remove this and transition all clients to use LocationBarModel directly.
diff --git a/chrome/browser/android/preferences/pref_service_bridge.cc b/chrome/browser/android/preferences/pref_service_bridge.cc
index bc9712b..cddfe7e2 100644
--- a/chrome/browser/android/preferences/pref_service_bridge.cc
+++ b/chrome/browser/android/preferences/pref_service_bridge.cc
@@ -351,6 +351,12 @@ static jboolean JNI_PrefServiceBridge_GetDoNotTrackEnabled(
   return GetPrefService()->GetBoolean(prefs::kEnableDoNotTrack);
 }
 
+static jboolean JNI_PrefServiceBridge_GetSodiumEnabled(
+    JNIEnv* env,
+    const JavaParamRef<jobject>& obj) {
+  return GetPrefService()->GetBoolean(prefs::kEnableSodium);
+}
+
 static jboolean JNI_PrefServiceBridge_GetNetworkPredictionEnabled(
     JNIEnv* env,
     const JavaParamRef<jobject>& obj) {
@@ -849,6 +855,13 @@ static void JNI_PrefServiceBridge_SetDoNotTrackEnabled(
   GetPrefService()->SetBoolean(prefs::kEnableDoNotTrack, allow);
 }
 
+static void JNI_PrefServiceBridge_SetSodiumEnabled(
+    JNIEnv* env,
+    const JavaParamRef<jobject>& obj,
+    jboolean enabled) {
+  GetPrefService()->SetBoolean(prefs::kEnableSodium, enabled);
+}
+
 static ScopedJavaLocalRef<jstring> JNI_PrefServiceBridge_GetSyncLastAccountId(
     JNIEnv* env,
     const JavaParamRef<jobject>& obj) {
diff --git a/chrome/browser/renderer_preferences_util.cc b/chrome/browser/renderer_preferences_util.cc
index 9008f3e..b95707f 100644
--- a/chrome/browser/renderer_preferences_util.cc
+++ b/chrome/browser/renderer_preferences_util.cc
@@ -88,6 +88,7 @@ void UpdateFromSystemSettings(blink::mojom::RendererPreferences* prefs,
       pref_service->GetBoolean(prefs::kEnableDoNotTrack);
   prefs->enable_encrypted_media =
       pref_service->GetBoolean(prefs::kEnableEncryptedMedia);
+  prefs->enable_sodium = pref_service->GetBoolean(prefs::kEnableSodium);
   prefs->webrtc_ip_handling_policy = std::string();
   // Handling the backward compatibility of previous boolean verions of policy
   // controls.
diff --git a/chrome/browser/ui/browser_ui_prefs.cc b/chrome/browser/ui/browser_ui_prefs.cc
index e011650b..9dc45e2 100644
--- a/chrome/browser/ui/browser_ui_prefs.cc
+++ b/chrome/browser/ui/browser_ui_prefs.cc
@@ -77,6 +77,7 @@ void RegisterBrowserUserPrefs(user_prefs::PrefRegistrySyncable* registry) {
   registry->RegisterBooleanPref(
       prefs::kEnableDoNotTrack, false,
       user_prefs::PrefRegistrySyncable::SYNCABLE_PREF);
+  registry->RegisterBooleanPref(prefs::kEnableSodium, true);
 #if !defined(OS_CHROMEOS) && !defined(OS_ANDROID)
   registry->RegisterBooleanPref(prefs::kPrintPreviewUseSystemDefaultPrinter,
                                 false);
diff --git a/chrome/browser/ui/prefs/pref_watcher.cc b/chrome/browser/ui/prefs/pref_watcher.cc
index adec473..a669a92 100644
--- a/chrome/browser/ui/prefs/pref_watcher.cc
+++ b/chrome/browser/ui/prefs/pref_watcher.cc
@@ -66,6 +66,8 @@ PrefWatcher::PrefWatcher(Profile* profile) : profile_(profile) {
                                      renderer_callback);
   profile_pref_change_registrar_.Add(prefs::kEnableEncryptedMedia,
                                      renderer_callback);
+  profile_pref_change_registrar_.Add(prefs::kEnableSodium,
+                                     renderer_callback);
   profile_pref_change_registrar_.Add(prefs::kWebRTCMultipleRoutesEnabled,
                                      renderer_callback);
   profile_pref_change_registrar_.Add(prefs::kWebRTCNonProxiedUdpEnabled,
diff --git a/chrome/common/pref_names.cc b/chrome/common/pref_names.cc
index 1b02593..4b60a3b 100644
--- a/chrome/common/pref_names.cc
+++ b/chrome/common/pref_names.cc
@@ -1122,6 +1122,8 @@ const char kEnableDoNotTrack[] = "enable_do_not_track";
 // non-webkit-prefixed string.
 const char kEnableEncryptedMedia[] = "webkit.webprefs.encrypted_media_enabled";
 
+const char kEnableSodium[] = "enable_sodium";
+
 // Boolean that specifies whether to import the form data for autofill from the
 // default browser on first run.
 const char kImportAutofillFormData[] = "import_autofill_form_data";
diff --git a/chrome/common/pref_names.h b/chrome/common/pref_names.h
index 4932410..454d6d7 100644
--- a/chrome/common/pref_names.h
+++ b/chrome/common/pref_names.h
@@ -358,6 +358,7 @@ extern const char kEnableHyperlinkAuditing[];
 extern const char kEnableReferrers[];
 extern const char kEnableDoNotTrack[];
 extern const char kEnableEncryptedMedia[];
+extern const char kEnableSodium[];
 
 extern const char kImportAutofillFormData[];
 extern const char kImportBookmarks[];
diff --git a/content/browser/frame_host/navigation_controller_android.cc b/content/browser/frame_host/navigation_controller_android.cc
index 3c08d56..54c89dc 100644
--- a/content/browser/frame_host/navigation_controller_android.cc
+++ b/content/browser/frame_host/navigation_controller_android.cc
@@ -375,6 +375,31 @@ void NavigationControllerAndroid::SetUseDesktopUserAgent(
   }
 }
 
+bool NavigationControllerAndroid::GetEnableSodium(
+    JNIEnv* env,
+    const JavaParamRef<jobject>& obj) {
+  return navigation_controller_->GetEnableSodium();
+}
+
+void NavigationControllerAndroid::SetEnableSodium(
+    JNIEnv* env,
+    const JavaParamRef<jobject>& obj,
+    jboolean enabled,
+    jboolean reload_on_state_change) {
+  if (GetEnableSodium(env, obj) == enabled)
+    return;
+
+  navigation_controller_->SetEnableSodium(enabled);
+  navigation_controller_->SyncRendererPrefs();
+
+  // Send the override to the renderer.
+  if (reload_on_state_change) {
+    // Reloading the page will send the override down as part of the
+    // navigation IPC message.
+    navigation_controller_->Reload(ReloadType::ORIGINAL_REQUEST_URL, true);
+  }
+}
+
 base::android::ScopedJavaLocalRef<jobject>
 NavigationControllerAndroid::GetEntryAtIndex(JNIEnv* env,
                                              const JavaParamRef<jobject>& obj,
diff --git a/content/browser/frame_host/navigation_controller_android.h b/content/browser/frame_host/navigation_controller_android.h
index 7f01993..e8359e1 100644
--- a/content/browser/frame_host/navigation_controller_android.h
+++ b/content/browser/frame_host/navigation_controller_android.h
@@ -92,6 +92,14 @@ class CONTENT_EXPORT NavigationControllerAndroid {
       const base::android::JavaParamRef<jobject>& /* obj */,
       jboolean state,
       jboolean reload_on_state_change);
+  bool GetEnableSodium(
+      JNIEnv* env,
+      const base::android::JavaParamRef<jobject>& /* obj */);
+  void SetEnableSodium(
+      JNIEnv* env,
+      const base::android::JavaParamRef<jobject>& /* obj */,
+      jboolean enabled,
+      jboolean reload_on_state_change);
   base::android::ScopedJavaLocalRef<jobject> GetEntryAtIndex(
       JNIEnv* env,
       const base::android::JavaParamRef<jobject>& obj,
diff --git a/content/browser/frame_host/navigation_controller_impl.cc b/content/browser/frame_host/navigation_controller_impl.cc
index f50c128..5cbc88a 100644
--- a/content/browser/frame_host/navigation_controller_impl.cc
+++ b/content/browser/frame_host/navigation_controller_impl.cc
@@ -74,6 +74,7 @@
 #include "content/public/browser/render_widget_host_view.h"
 #include "content/public/browser/replaced_navigation_entry_data.h"
 #include "content/public/browser/storage_partition.h"
+#include "content/public/browser/web_contents.h"
 #include "content/public/common/content_client.h"
 #include "content/public/common/content_constants.h"
 #include "content/public/common/content_features.h"
@@ -3469,4 +3470,19 @@ void NavigationControllerImpl::SetSkippableForSameDocumentEntries(
   }
 }
 
+bool NavigationControllerImpl::GetEnableSodium() {
+  blink::mojom::RendererPreferences* render_prefs = GetWebContents()->GetMutableRendererPrefs();
+  return render_prefs->enable_sodium;
+}
+
+void NavigationControllerImpl::SetEnableSodium(bool enabled) {
+  blink::mojom::RendererPreferences* render_prefs = GetWebContents()->GetMutableRendererPrefs();
+  render_prefs->enable_sodium = enabled;
+}
+
+void NavigationControllerImpl::SyncRendererPrefs() {
+  GetWebContents()->GetRenderViewHost()->SyncRendererPrefs();
+  delegate_->UpdateOverridingUserAgent();
+}
+
 }  // namespace content
diff --git a/content/browser/frame_host/navigation_controller_impl.h b/content/browser/frame_host/navigation_controller_impl.h
index 9491744..8e23c3d 100644
--- a/content/browser/frame_host/navigation_controller_impl.h
+++ b/content/browser/frame_host/navigation_controller_impl.h
@@ -265,6 +265,10 @@ class CONTENT_EXPORT NavigationControllerImpl : public NavigationController {
   // entries can be updated as needed.
   void NotifyUserActivation();
 
+  bool GetEnableSodium();
+  void SetEnableSodium(bool enabled);
+  void SyncRendererPrefs();
+
  private:
   friend class RestoreHelper;
 
diff --git a/content/public/android/java/src/org/chromium/content/browser/framehost/NavigationControllerImpl.java b/content/public/android/java/src/org/chromium/content/browser/framehost/NavigationControllerImpl.java
index 9d45f56..ce78e09 100644
--- a/content/public/android/java/src/org/chromium/content/browser/framehost/NavigationControllerImpl.java
+++ b/content/public/android/java/src/org/chromium/content/browser/framehost/NavigationControllerImpl.java
@@ -201,6 +201,19 @@ import org.chromium.content_public.common.ResourceRequestBody;
     }
 
     @Override
+    public boolean getEnableSodium() {
+        if (mNativeNavigationControllerAndroid == 0) return false;
+        return nativeGetEnableSodium(mNativeNavigationControllerAndroid);
+    }
+
+    @Override
+    public void setEnableSodium(boolean enabled, boolean reloadOnChange) {
+        if (mNativeNavigationControllerAndroid != 0) {
+            nativeSetEnableSodium(mNativeNavigationControllerAndroid, enabled, reloadOnChange);
+        }
+    }
+
+    @Override
     public NavigationEntry getEntryAtIndex(int index) {
         if (mNativeNavigationControllerAndroid != 0) {
             return nativeGetEntryAtIndex(mNativeNavigationControllerAndroid, index);
@@ -308,6 +321,9 @@ import org.chromium.content_public.common.ResourceRequestBody;
     private native boolean nativeGetUseDesktopUserAgent(long nativeNavigationControllerAndroid);
     private native void nativeSetUseDesktopUserAgent(long nativeNavigationControllerAndroid,
             boolean override, boolean reloadOnChange);
+    private native boolean nativeGetEnableSodium(long nativeNavigationControllerAndroid);
+    private native void nativeSetEnableSodium(long nativeNavigationControllerAndroid,
+            boolean enabled, boolean reloadOnChange);
     private native NavigationEntry nativeGetEntryAtIndex(
             long nativeNavigationControllerAndroid, int index);
     private native NavigationEntry nativeGetVisibleEntry(long nativeNavigationControllerAndroid);
diff --git a/content/public/android/java/src/org/chromium/content_public/browser/NavigationController.java b/content/public/android/java/src/org/chromium/content_public/browser/NavigationController.java
index a5b3723..e3e6e63 100644
--- a/content/public/android/java/src/org/chromium/content_public/browser/NavigationController.java
+++ b/content/public/android/java/src/org/chromium/content_public/browser/NavigationController.java
@@ -141,6 +141,17 @@ public interface NavigationController {
     public void setUseDesktopUserAgent(boolean override, boolean reloadOnChange);
 
     /**
+     * @return true, if allow sodium.
+     */
+    public boolean getEnableSodium();
+
+    /**
+     * @param enabled If true, allow sodium.
+     * @param reloadOnChange Reload the page.
+     */
+    public void setEnableSodium(boolean enabled, boolean reloadOnChange);
+
+    /**
      * Return the NavigationEntry at the given index.
      * @param index Index to retrieve the NavigationEntry for.
      * @return Entry containing info about the navigation, null if the index is out of bounds.
diff --git a/content/public/common/common_param_traits_macros.h b/content/public/common/common_param_traits_macros.h
index 9ad8ad0..a6b0379 100644
--- a/content/public/common/common_param_traits_macros.h
+++ b/content/public/common/common_param_traits_macros.h
@@ -321,6 +321,7 @@ IPC_STRUCT_TRAITS_BEGIN(blink::mojom::RendererPreferences)
   IPC_STRUCT_TRAITS_MEMBER(enable_referrers)
   IPC_STRUCT_TRAITS_MEMBER(enable_do_not_track)
   IPC_STRUCT_TRAITS_MEMBER(enable_encrypted_media)
+  IPC_STRUCT_TRAITS_MEMBER(enable_sodium)
   IPC_STRUCT_TRAITS_MEMBER(webrtc_ip_handling_policy)
   IPC_STRUCT_TRAITS_MEMBER(webrtc_udp_min_port)
   IPC_STRUCT_TRAITS_MEMBER(webrtc_udp_max_port)
diff --git a/content/public/renderer/render_frame.h b/content/public/renderer/render_frame.h
index 36b2f87..d3dd328 100644
--- a/content/public/renderer/render_frame.h
+++ b/content/public/renderer/render_frame.h
@@ -312,6 +312,10 @@ class CONTENT_EXPORT RenderFrame : public IPC::Listener,
   // a local root.
   virtual void UpdateAllLifecyclePhasesAndCompositeForTesting() = 0;
 
+  virtual bool IsEnableSodium() = 0;
+
+  virtual blink::WebString SodiumUserAgent() = 0;
+
  protected:
   ~RenderFrame() override {}
 
diff --git a/content/renderer/render_frame_impl.cc b/content/renderer/render_frame_impl.cc
index e18fd3c..581d613 100644
--- a/content/renderer/render_frame_impl.cc
+++ b/content/renderer/render_frame_impl.cc
@@ -48,6 +48,7 @@
 #include "base/trace_event/trace_event.h"
 #include "build/build_config.h"
 #include "cc/base/switches.h"
+#include "components/version_info/version_info.h"
 #include "content/common/accessibility_messages.h"
 #include "content/common/associated_interfaces.mojom.h"
 #include "content/common/content_constants_internal.h"
@@ -82,6 +83,7 @@
 #include "content/public/common/url_constants.h"
 #include "content/public/common/url_loader_throttle.h"
 #include "content/public/common/url_utils.h"
+#include "content/public/common/user_agent.h"
 #include "content/public/renderer/browser_plugin_delegate.h"
 #include "content/public/renderer/content_renderer_client.h"
 #include "content/public/renderer/context_menu_client.h"
@@ -7684,4 +7686,16 @@ void RenderFrameImpl::AddMessageToConsoleImpl(
   frame_->AddMessageToConsole(wcm, discard_duplicates);
 }
 
+bool RenderFrameImpl::IsEnableSodium() {
+  return render_view_->renderer_preferences_.enable_sodium;
+}
+
+blink::WebString RenderFrameImpl::SodiumUserAgent() {
+  std::string product = version_info::GetProductNameAndVersionForUserAgent();
+#if defined(OS_ANDROID)
+  product += " Mobile";
+#endif
+  return WebString::FromUTF8(content::BuildUserAgentFromProduct(product));
+}
+
 }  // namespace content
diff --git a/content/renderer/render_frame_impl.h b/content/renderer/render_frame_impl.h
index b1241cf..014d6cd 100644
--- a/content/renderer/render_frame_impl.h
+++ b/content/renderer/render_frame_impl.h
@@ -995,6 +995,10 @@ class CONTENT_EXPORT RenderFrameImpl
   void SetDocumentInterfaceBrokerForTesting(
       blink::mojom::DocumentInterfaceBrokerPtr test_broker);
 
+  bool IsEnableSodium() override;
+
+  blink::WebString SodiumUserAgent() override;
+
  protected:
   explicit RenderFrameImpl(CreateParams params);
 
diff --git a/third_party/blink/public/mojom/renderer_preferences.mojom b/third_party/blink/public/mojom/renderer_preferences.mojom
index 97f5463..eb50350 100644
--- a/third_party/blink/public/mojom/renderer_preferences.mojom
+++ b/third_party/blink/public/mojom/renderer_preferences.mojom
@@ -79,6 +79,9 @@ struct RendererPreferences {
   // spec.
   bool enable_encrypted_media = true;
 
+  // Set to true to enable sodium.
+  bool enable_sodium = false;
+
   // This is the IP handling policy override for WebRTC. The value must be one
   // of the strings defined in privacy.json. The allowed values are specified
   // in webrtc_ip_handling_policy.h.
diff --git a/third_party/blink/public/web/web_local_frame_client.h b/third_party/blink/public/web/web_local_frame_client.h
index 750d82c..3570f05 100644
--- a/third_party/blink/public/web/web_local_frame_client.h
+++ b/third_party/blink/public/web/web_local_frame_client.h
@@ -749,6 +749,10 @@ class BLINK_EXPORT WebLocalFrameClient {
   // header. An empty string indicates that no DNT header will be send.
   virtual WebString DoNotTrackValue() { return WebString(); }
 
+  // Sodium ----------------------------------------------------
+  virtual bool IsEnableSodium() { return false; }
+  virtual WebString SodiumUserAgent() { return WebString(); }
+
   // WebGL ------------------------------------------------------
 
   // Asks the embedder whether WebGL is blocked for the WebFrame. This call is
diff --git a/third_party/blink/renderer/core/exported/local_frame_client_impl.cc b/third_party/blink/renderer/core/exported/local_frame_client_impl.cc
index d2c64ae..ce2780f9 100644
--- a/third_party/blink/renderer/core/exported/local_frame_client_impl.cc
+++ b/third_party/blink/renderer/core/exported/local_frame_client_impl.cc
@@ -841,6 +841,14 @@ String LocalFrameClientImpl::DoNotTrackValue() {
   return String();
 }
 
+bool LocalFrameClientImpl::IsEnableSodium() {
+  return web_frame_->Client()->IsEnableSodium();
+}
+
+String LocalFrameClientImpl::SodiumUserAgent() {
+  return web_frame_->Client()->SodiumUserAgent();
+}
+
 // Called when the FrameLoader goes into a state in which a new page load
 // will occur.
 void LocalFrameClientImpl::TransitionToCommittedForNewPage() {
diff --git a/third_party/blink/renderer/core/exported/local_frame_client_impl.h b/third_party/blink/renderer/core/exported/local_frame_client_impl.h
index 74725ea..c9a3635 100644
--- a/third_party/blink/renderer/core/exported/local_frame_client_impl.h
+++ b/third_party/blink/renderer/core/exported/local_frame_client_impl.h
@@ -177,6 +177,8 @@ class LocalFrameClientImpl final : public LocalFrameClient {
   WTF::String UserAgent() override;
   blink::UserAgentMetadata UserAgentMetadata() override;
   WTF::String DoNotTrackValue() override;
+  bool IsEnableSodium() override;
+  WTF::String SodiumUserAgent() override;
   void TransitionToCommittedForNewPage() override;
   LocalFrame* CreateFrame(const WTF::AtomicString& name,
                           HTMLFrameOwnerElement*) override;
diff --git a/third_party/blink/renderer/core/frame/local_frame_client.h b/third_party/blink/renderer/core/frame/local_frame_client.h
index 91d714c..f656ae24 100644
--- a/third_party/blink/renderer/core/frame/local_frame_client.h
+++ b/third_party/blink/renderer/core/frame/local_frame_client.h
@@ -281,6 +281,10 @@ class CORE_EXPORT LocalFrameClient : public FrameClient {
 
   virtual String DoNotTrackValue() = 0;
 
+  virtual bool IsEnableSodium() = 0;
+
+  virtual String SodiumUserAgent() = 0;
+
   virtual void TransitionToCommittedForNewPage() = 0;
 
   virtual LocalFrame* CreateFrame(const AtomicString& name,
diff --git a/third_party/blink/renderer/core/loader/empty_clients.h b/third_party/blink/renderer/core/loader/empty_clients.h
index 57b35dd..cd8c8f8 100644
--- a/third_party/blink/renderer/core/loader/empty_clients.h
+++ b/third_party/blink/renderer/core/loader/empty_clients.h
@@ -322,6 +322,10 @@ class CORE_EXPORT EmptyLocalFrameClient : public LocalFrameClient {
 
   String DoNotTrackValue() override { return String(); }
 
+  bool IsEnableSodium() override { return false; }
+
+  String SodiumUserAgent() override { return ""; }
+
   void TransitionToCommittedForNewPage() override {}
 
   bool NavigateBackForward(int offset) const override { return false; }
