diff --git a/content/browser/BUILD.gn b/content/browser/BUILD.gn
index 75fc9d9..7dba2ff 100644
--- a/content/browser/BUILD.gn
+++ b/content/browser/BUILD.gn
@@ -1738,6 +1738,10 @@ jumbo_source_set("browser") {
     "sms/sms_queue.h",
     "sms/sms_service.cc",
     "sms/sms_service.h",
+    "sodium/sodium_storage_value_store.cc",
+    "sodium/sodium_storage_value_store.h",
+    "sodium/sodium_storage_area_host.cc",
+    "sodium/sodium_storage_area_host.h",
     "speech/speech_recognition_dispatcher_host.cc",
     "speech/speech_recognition_dispatcher_host.h",
     "speech/speech_recognition_manager_impl.cc",
diff --git a/content/browser/renderer_host/render_process_host_impl.cc b/content/browser/renderer_host/render_process_host_impl.cc
index 60dc1b6..93d3df9 100644
--- a/content/browser/renderer_host/render_process_host_impl.cc
+++ b/content/browser/renderer_host/render_process_host_impl.cc
@@ -135,6 +135,7 @@
 #include "content/browser/resolve_proxy_msg_helper.h"
 #include "content/browser/service_worker/service_worker_context_wrapper.h"
 #include "content/browser/site_instance_impl.h"
+#include "content/browser/sodium/sodium_storage_area_host.h"
 #include "content/browser/storage_partition_impl.h"
 #include "content/browser/theme_helper.h"
 #include "content/browser/tracing/background_tracing_manager_impl.h"
@@ -2204,6 +2205,8 @@ void RenderProcessHostImpl::RegisterMojoInterfaces() {
   }
 #endif
 
+  registry->AddInterface(base::BindRepeating(&SodiumStorageAreaHost::Create, GetBrowserContext()->GetPath()));
+
 #if defined(OS_WIN)
   registry->AddInterface(
       base::BindRepeating(&DWriteFontProxyImpl::Create),
diff --git a/content/browser/sodium/sodium_storage_area_host.cc b/content/browser/sodium/sodium_storage_area_host.cc
new file mode 100644
index 0000000..b46ddd4
--- /dev/null
+++ b/content/browser/sodium/sodium_storage_area_host.cc
@@ -0,0 +1,97 @@
+#include "content/browser/sodium/sodium_storage_area_host.h"
+
+#include "mojo/public/cpp/bindings/self_owned_receiver.h"
+#include "content/browser/sodium/sodium_storage_value_store.h"
+
+namespace content {
+
+SodiumStorageAreaHost::SodiumStorageAreaHost(const base::FilePath& profile_dir) : profile_dir_(profile_dir) {}
+
+SodiumStorageAreaHost::~SodiumStorageAreaHost() = default;
+
+void SodiumStorageAreaHost::Create(const base::FilePath& profile_dir, mojo::PendingReceiver<blink::mojom::SodiumStorageArea> receiver) {
+  mojo::MakeSelfOwnedReceiver(std::make_unique<SodiumStorageAreaHost>(profile_dir), std::move(receiver));
+}
+
+std::unique_ptr<SodiumStorageValueStore> SodiumStorageAreaHost::GetValueStore(const std::string& area) {
+  const base::FilePath file_name = base::FilePath(profile_dir_).Append("sodium_storage_" + area);
+  //LOG(INFO) << "SodiumStorageAreaHost::getValueStore(): leveldb path:" << file_name;
+
+  std::unique_ptr<SodiumStorageValueStore> store = std::make_unique<SodiumStorageValueStore>(file_name);
+  return store;
+}
+
+void SodiumStorageAreaHost::getAll(const std::string& area, getCallback callback) {
+  std::unique_ptr<SodiumStorageValueStore> store = GetValueStore(area);
+  if (!store) {
+    //LOG(INFO) << "SodiumStorageAreaHost::getAll(): invalid value store.";
+    return;
+  }
+
+  base::DictionaryValue items = store->Get();
+  //LOG(INFO) << "SodiumStorageAreaHost::getAll(): ok():" << store->ok();
+
+  std::move(callback).Run(std::move(items));
+}
+
+void SodiumStorageAreaHost::get(const std::string& area, base::Value keys, getCallback callback) {
+  std::unique_ptr<SodiumStorageValueStore> store = GetValueStore(area);
+  if (!store) {
+    //LOG(INFO) << "SodiumStorageAreaHost::get(): invalid value store.";
+    return;
+  }
+
+  base::DictionaryValue items = base::DictionaryValue();
+  for (base::Value &key: keys.GetList()) {
+    //LOG(INFO) << "SodiumStorageAreaHost::get(): key:" << key.GetString();
+    base::Value value = store->Get(key.GetString());
+    //LOG(INFO) << "SodiumStorageAreaHost::get(): IsNotFound():" << store->IsNotFound();
+    if (!store->IsNotFound()) items.Set(key.GetString(), base::Value::ToUniquePtrValue(std::move(value)));
+  }
+
+  std::move(callback).Run(std::move(items));
+}
+
+void SodiumStorageAreaHost::set(const std::string& area, base::Value items, setCallback callback) {
+  std::unique_ptr<SodiumStorageValueStore> store = GetValueStore(area);
+  if (!store) {
+    //LOG(INFO) << "SodiumStorageAreaHost::set(): invalid value store.";
+    return;
+  }
+
+  for (const auto& iter : items.DictItems()) {
+    //LOG(INFO) << "SodiumStorageAreaHost::set(): key:" << iter.first;
+    store->Put(iter.first, iter.second.GetBlob());
+  }
+  store->Write();
+  //LOG(INFO) << "SodiumStorageAreaHost::set(): ok():" << store->ok();
+
+  std::move(callback).Run();
+}
+
+void SodiumStorageAreaHost::remove(const std::string& area, base::Value keys, removeCallback callback) {
+  std::unique_ptr<SodiumStorageValueStore> store = GetValueStore(area);
+  if (!store) {
+    //LOG(INFO) << "SodiumStorageAreaHost::set(): invalid value store.";
+    return;
+  }
+
+  for (base::Value &key: keys.GetList()) {
+    //LOG(INFO) << "SodiumStorageAreaHost::remove(): key:" << key.GetString();
+    store->Delete(key.GetString());
+  }
+  store->Write();
+  //LOG(INFO) << "SodiumStorageAreaHost::set(): ok():" << store->ok();
+
+  std::move(callback).Run();
+}
+
+void SodiumStorageAreaHost::clear(const std::string& area, clearCallback callback) {
+  const base::FilePath file_name = base::FilePath(profile_dir_).Append("sodium_storage_" + area);
+  //LOG(INFO) << "SodiumStorageAreaHost::clear(): leveldb path:" << file_name;
+
+  SodiumStorageValueStore::DestroyDB(file_name);
+  std::move(callback).Run();
+}
+
+}  // namespace content
diff --git a/content/browser/sodium/sodium_storage_area_host.h b/content/browser/sodium/sodium_storage_area_host.h
new file mode 100644
index 0000000..6d3310d
--- /dev/null
+++ b/content/browser/sodium/sodium_storage_area_host.h
@@ -0,0 +1,32 @@
+#ifndef CONTENT_BROWSER_SODIUM_SODIUM_STORAGE_AREA_HOST_H_
+#define CONTENT_BROWSER_SODIUM_SODIUM_STORAGE_AREA_HOST_H_
+
+#include "base/macros.h"
+#include "third_party/blink/public/mojom/sodium/sodium_storage_area.mojom.h"
+#include "content/browser/sodium/sodium_storage_value_store.h"
+
+namespace content {
+
+class SodiumStorageAreaHost : public blink::mojom::SodiumStorageArea {
+ public:
+  explicit SodiumStorageAreaHost(const base::FilePath& profile_dir);
+  ~SodiumStorageAreaHost() override;
+
+  static void Create(const base::FilePath& profile_dir, mojo::PendingReceiver<blink::mojom::SodiumStorageArea> receiver);
+
+ private:
+  std::unique_ptr<SodiumStorageValueStore> GetValueStore(const std::string& area);
+  void getAll(const std::string& area, getCallback callback) override;
+  void get(const std::string& area, base::Value keys, getCallback callback) override;
+  void set(const std::string& area, base::Value items, setCallback callback) override;
+  void remove(const std::string& area, base::Value keys, removeCallback callback) override;
+  void clear(const std::string& area, clearCallback callback) override;
+
+  const base::FilePath profile_dir_;
+
+  DISALLOW_COPY_AND_ASSIGN(SodiumStorageAreaHost);
+};
+
+}  // namespace content
+
+#endif  // CONTENT_BROWSER_SODIUM_SODIUM_STORAGE_AREA_HOST_H_
diff --git a/content/browser/sodium/sodium_storage_value_store.cc b/content/browser/sodium/sodium_storage_value_store.cc
new file mode 100644
index 0000000..88ddd5d
--- /dev/null
+++ b/content/browser/sodium/sodium_storage_value_store.cc
@@ -0,0 +1,56 @@
+#include "content/browser/sodium/sodium_storage_value_store.h"
+
+namespace content {
+
+SodiumStorageValueStore::SodiumStorageValueStore(const base::FilePath& file_name) {
+  options_.create_if_missing = true;
+  options_.paranoid_checks = true;
+  options_.compression = leveldb::kSnappyCompression;
+  read_options_.verify_checksums = true;
+  status_ = leveldb_env::OpenDB(options_, file_name.AsUTF8Unsafe(), &db_);
+}
+
+SodiumStorageValueStore::~SodiumStorageValueStore() = default;
+
+bool SodiumStorageValueStore::ok() {
+  return status_.ok();
+}
+
+bool SodiumStorageValueStore::IsNotFound() {
+  return status_.IsNotFound();
+}
+
+base::DictionaryValue SodiumStorageValueStore::Get() {
+  base::DictionaryValue items = base::DictionaryValue();
+  std::unique_ptr<leveldb::Iterator> it(db_->NewIterator(read_options_));
+  for (it->SeekToFirst(); it->Valid(); it->Next()) {
+    base::span<const uint8_t> wire_data = {reinterpret_cast<const uint8_t*>(it->value().data()), it->value().size()};
+    items.Set(it->key().ToString(), base::Value::ToUniquePtrValue(base::Value(wire_data)));
+  }
+  return items;
+}
+
+base::Value SodiumStorageValueStore::Get(const std::string& key) {
+  std::string value;
+  status_ = db_->Get(read_options_, key, &value);
+  base::span<const uint8_t> wire_data = {reinterpret_cast<const uint8_t*>(value.data()), value.size()};
+  return base::Value(wire_data);
+}
+
+void SodiumStorageValueStore::Put(const std::string& key, const base::Value::BlobStorage& blob) {
+  batch_.Put(key, leveldb::Slice(reinterpret_cast<const char*>(blob.data()), blob.size()));
+}
+
+void SodiumStorageValueStore::Delete(const std::string& key) {
+  batch_.Delete(key);
+}
+
+void SodiumStorageValueStore::Write() {
+  status_ = db_->Write(write_options_, &batch_);
+}
+
+void SodiumStorageValueStore::DestroyDB(const base::FilePath& file_name) {
+  leveldb::DestroyDB(file_name.AsUTF8Unsafe(), leveldb_env::Options());
+}
+
+}  // namespace content
diff --git a/content/browser/sodium/sodium_storage_value_store.h b/content/browser/sodium/sodium_storage_value_store.h
new file mode 100644
index 0000000..409f852
--- /dev/null
+++ b/content/browser/sodium/sodium_storage_value_store.h
@@ -0,0 +1,39 @@
+#ifndef CONTENT_BROWSER_SODIUM_SODIUM_STORAGE_VALUE_STORE_H_
+#define CONTENT_BROWSER_SODIUM_SODIUM_STORAGE_VALUE_STORE_H_
+
+#include "base/values.h"
+#include "third_party/leveldatabase/env_chromium.h"
+#include "third_party/leveldatabase/src/include/leveldb/write_batch.h"
+
+namespace content {
+
+class SodiumStorageValueStore {
+ public:
+  explicit SodiumStorageValueStore(const base::FilePath& file_name);
+  ~SodiumStorageValueStore();
+
+  bool ok();
+  bool IsNotFound();
+
+  base::DictionaryValue Get();
+  base::Value Get(const std::string& key);
+  void Put(const std::string& key, const base::Value::BlobStorage& blob);
+  void Delete(const std::string& key);
+  void Write();
+  static void DestroyDB(const base::FilePath& file_name);
+
+ private:
+  std::unique_ptr<leveldb::DB> db_;
+  leveldb::Status status_;
+  leveldb::WriteBatch batch_;
+
+  leveldb_env::Options options_;
+  leveldb::ReadOptions read_options_;
+  leveldb::WriteOptions write_options_;
+
+  DISALLOW_COPY_AND_ASSIGN(SodiumStorageValueStore);
+};
+
+}  // namespace content
+
+#endif  // CONTENT_BROWSER_SODIUM_SODIUM_STORAGE_VALUE_STORE_H_
diff --git a/third_party/blink/public/mojom/BUILD.gn b/third_party/blink/public/mojom/BUILD.gn
index c33e993..318b8a9 100644
--- a/third_party/blink/public/mojom/BUILD.gn
+++ b/third_party/blink/public/mojom/BUILD.gn
@@ -130,6 +130,7 @@ mojom("mojom_platform") {
     "service_worker/service_worker_stream_handle.mojom",
     "site_engagement/site_engagement.mojom",
     "sms/sms_receiver.mojom",
+    "sodium/sodium_storage_area.mojom",
     "speech/speech_recognition_error.mojom",
     "speech/speech_recognition_error_code.mojom",
     "speech/speech_recognition_grammar.mojom",
diff --git a/third_party/blink/public/mojom/sodium/sodium_storage_area.mojom b/third_party/blink/public/mojom/sodium/sodium_storage_area.mojom
new file mode 100644
index 0000000..493d403
--- /dev/null
+++ b/third_party/blink/public/mojom/sodium/sodium_storage_area.mojom
@@ -0,0 +1,16 @@
+module blink.mojom;
+
+import "mojo/public/mojom/base/values.mojom";
+
+interface SodiumStorageArea {
+  [Sync]
+  getAll(string area) => (mojo_base.mojom.DictionaryValue items);
+  [Sync]
+  get(string area, mojo_base.mojom.ListValue keys) => (mojo_base.mojom.DictionaryValue items);
+  [Sync]
+  set(string area, mojo_base.mojom.DictionaryValue items) => ();
+  [Sync]
+  remove(string area, mojo_base.mojom.ListValue keys) => ();
+  [Sync]
+  clear(string area) => ();
+};
