diff --git a/content/common/BUILD.gn b/content/common/BUILD.gn
index 1940f0d..5e58878 100644
--- a/content/common/BUILD.gn
+++ b/content/common/BUILD.gn
@@ -249,6 +249,7 @@ source_set("common") {
     "single_request_url_loader_factory.h",
     "skia_utils.cc",
     "skia_utils.h",
+    "sodium_whitelist.cc",
     "swapped_out_messages.cc",
     "swapped_out_messages.h",
     "tab_switching_time_callback.cc",
diff --git a/content/common/sodium_whitelist.cc b/content/common/sodium_whitelist.cc
new file mode 100644
index 0000000..2ec4fb6
--- /dev/null
+++ b/content/common/sodium_whitelist.cc
@@ -0,0 +1,55 @@
+#include "content/public/common/sodium_whitelist.h"
+
+#include <array>
+#include <regex>
+#include "base/no_destructor.h"
+
+namespace content {
+namespace SodiumWhitelist {
+
+bool IsDomainAllowed(const GURL& url, const std::vector<const std::regex>* whitelist) {
+  if (!url.SchemeIsHTTPOrHTTPS())
+    return false;
+
+  for (const std::regex &domain: *whitelist) {
+    if (std::regex_match(url.host(), domain))
+      return true;
+  }
+
+  return false;
+}
+
+
+bool IsAllowSodiumJs(const GURL& url) {
+  static const base::NoDestructor<const std::vector<const std::regex>> kSodiumAllowDomain({
+    std::regex("^www\\.youtube\\.com$"),
+    std::regex("^m\\.youtube\\.com$"),
+    std::regex("^tver\\.jp$"),
+    std::regex("^www\\.paravi\\.jp$")
+  });
+
+  return IsDomainAllowed(url, kSodiumAllowDomain.get());
+}
+
+
+bool IsSodiumResultPage(const GURL& url) {
+  static const base::NoDestructor<const std::vector<const std::regex>> kSodiumAllowDomain({
+    std::regex("^wvm\\.webdino\\.org$"),
+    std::regex("^sodium-result\\.netlify\\.com$")
+  });
+
+  return url.spec().find("chrome://videomark/") == 0 || IsDomainAllowed(url, kSodiumAllowDomain.get());
+}
+
+
+bool IsForceDesktopMode(const GURL& url) {
+  static const base::NoDestructor<const std::vector<const std::regex>> kDesktopModeDomain({
+    std::regex("^tver\\.jp$"),
+    std::regex("^www\\.paravi\\.jp$")
+  });
+
+  return IsDomainAllowed(url, kDesktopModeDomain.get());
+}
+
+}  // namespace SodiumWhitelist
+}  // namespace content
diff --git a/content/public/common/BUILD.gn b/content/public/common/BUILD.gn
index c94dc1a..680a0b1 100644
--- a/content/public/common/BUILD.gn
+++ b/content/public/common/BUILD.gn
@@ -211,6 +211,7 @@ jumbo_source_set("common_sources") {
     "simple_connection_filter.cc",
     "simple_connection_filter.h",
     "socket_permission_request.h",
+    "sodium_whitelist.h",
     "stop_find_action.h",
     "storage_quota_params.h",
     "three_d_api_types.h",
diff --git a/content/public/common/sodium_whitelist.h b/content/public/common/sodium_whitelist.h
new file mode 100644
index 0000000..a308f60
--- /dev/null
+++ b/content/public/common/sodium_whitelist.h
@@ -0,0 +1,17 @@
+#ifndef CONTENT_PUBLIC_COMMON_SODIUM_WHITELIST_H_
+#define CONTENT_PUBLIC_COMMON_SODIUM_WHITELIST_H_
+
+#include "content/common/content_export.h"
+#include "url/gurl.h"
+
+namespace content {
+namespace SodiumWhitelist {
+
+CONTENT_EXPORT bool IsAllowSodiumJs(const GURL& url);
+CONTENT_EXPORT bool IsSodiumResultPage(const GURL& url);
+CONTENT_EXPORT bool IsForceDesktopMode(const GURL& url);
+
+}  // namespace SodiumWhitelist
+}  // namespace content
+
+#endif  // CONTENT_PUBLIC_COMMON_SODIUM_WHITELIST_H_
