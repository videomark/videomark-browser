diff --git a/url/BUILD.gn b/url/BUILD.gn
index 5d6b897..e347a50 100644
--- a/url/BUILD.gn
+++ b/url/BUILD.gn
@@ -25,6 +25,8 @@ component("url") {
     "origin.h",
     "scheme_host_port.cc",
     "scheme_host_port.h",
+    "sodium_whitelist.cc",
+    "sodium_whitelist.h",
     "third_party/mozilla/url_parse.cc",
     "third_party/mozilla/url_parse.h",
     "url_canon.cc",
diff --git a/url/sodium_whitelist.cc b/url/sodium_whitelist.cc
new file mode 100644
index 0000000..c3d0409
--- /dev/null
+++ b/url/sodium_whitelist.cc
@@ -0,0 +1,68 @@
+#include "url/sodium_whitelist.h"
+
+#include <array>
+#include <regex>
+#include "base/no_destructor.h"
+
+namespace url {
+namespace SodiumWhitelist {
+
+bool IsDomainAllowed(const GURL& url, const std::vector<const std::regex>* whitelist) {
+  if (!url.SchemeIsHTTPOrHTTPS())
+    return false;
+
+  for (const std::regex &domain: *whitelist) {
+    if (std::regex_match(url.host(), domain))
+      return true;
+  }
+
+  return false;
+}
+
+
+bool IsAllowSodiumJs(const GURL& url) {
+  static const base::NoDestructor<const std::vector<const std::regex>> kSodiumAllowDomain({
+    std::regex("^www\\.youtube\\.com$"),
+    std::regex("^m\\.youtube\\.com$"),
+    std::regex("^www\\.nicovideo\\.jp$"),
+    std::regex("^sp\\.nicovideo\\.jp$"),
+    std::regex("^fod\\.fujitv\\.co\\.jp$"),
+    std::regex("^nhk-ondemand\\.jp$"),
+    std::regex("^pc\\.video\\.dmkt-sp\\.jp$"),
+    std::regex("^abema\\.tv$"),
+    std::regex("^www\\.amazon\\.co\\.jp$"),
+    std::regex("^tver\\.jp$"),
+    std::regex("^www\\.paravi\\.jp$")
+  });
+
+  return IsDomainAllowed(url, kSodiumAllowDomain.get());
+}
+
+
+bool IsSodiumResultPage(const GURL& url) {
+  static const base::NoDestructor<const std::vector<const std::regex>> kSodiumAllowDomain({
+    std::regex("^wvm\\.webdino\\.org$"),
+    std::regex("^sodium-result\\.netlify\\.com$")
+  });
+
+  return url.spec().find("chrome://videomark/") == 0 || IsDomainAllowed(url, kSodiumAllowDomain.get());
+}
+
+
+bool IsForceDesktopMode(const GURL& url) {
+  static const base::NoDestructor<const std::vector<const std::regex>> kDesktopModeDomain({
+    std::regex("^fod\\.fujitv\\.co\\.jp$"),
+    std::regex("^fod-sp\\.fujitv\\.co\\.jp$"),
+    std::regex("^pc\\.video\\.dmkt-sp\\.jp$"),
+    std::regex("^video\\.dmkt-sp\\.jp$"),
+    std::regex("^abema\\.tv$"),
+    std::regex("^www\\.amazon\\.co\\.jp$"),
+    std::regex("^tver\\.jp$"),
+    std::regex("^www\\.paravi\\.jp$")
+  });
+
+  return IsDomainAllowed(url, kDesktopModeDomain.get());
+}
+
+}  // namespace SodiumWhitelist
+}  // namespace url
diff --git a/url/sodium_whitelist.h b/url/sodium_whitelist.h
new file mode 100644
index 0000000..abdfbb2
--- /dev/null
+++ b/url/sodium_whitelist.h
@@ -0,0 +1,17 @@
+#ifndef URL_SODIUM_WHITELIST_H_
+#define URL_SODIUM_WHITELIST_H_
+
+#include "base/component_export.h"
+#include "url/gurl.h"
+
+namespace url {
+namespace SodiumWhitelist {
+
+COMPONENT_EXPORT(URL) bool IsAllowSodiumJs(const GURL& url);
+COMPONENT_EXPORT(URL) bool IsSodiumResultPage(const GURL& url);
+COMPONENT_EXPORT(URL) bool IsForceDesktopMode(const GURL& url);
+
+}  // namespace SodiumWhitelist
+}  // namespace url
+
+#endif  // URL_SODIUM_WHITELIST_H_
